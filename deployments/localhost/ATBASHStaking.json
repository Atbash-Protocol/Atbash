{
  "address": "0x959922bE3CAee4b8Cd9a407cc3ac1C251C2007B1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_Bash",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sBash",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_epochLength",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_firstEpochNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_firstEpochTime",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipPulled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipPushed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "Bash",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "distribute",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "length",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "endTime",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forfeit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "giveLockBonus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "index",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "locker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pullManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner_",
          "type": "address"
        }
      ],
      "name": "pushManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "returnLockBonus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sBash",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ATBASHStaking.CONTRACTS",
          "name": "_contract",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_warmupPeriod",
          "type": "uint256"
        }
      ],
      "name": "setWarmup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "stake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleDepositLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_trigger",
          "type": "bool"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "warmupContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "warmupInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gons",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "lock",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "warmupPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x45ef03975425cb48d4f93c007a56f082efaa145523d2521310a9ab5e4591fb68",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x959922bE3CAee4b8Cd9a407cc3ac1C251C2007B1",
    "transactionIndex": 0,
    "gasUsed": "1489905",
    "logsBloom": "0x
    "blockHash": "0xf9ebb1270f0b6b6ffa55dabf5088d0146a551ccb1568b2e356668c6e09a0a50b",
    "transactionHash": "0x45ef03975425cb48d4f93c007a56f082efaa145523d2521310a9ab5e4591fb68",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17,
        "transactionHash": "0x45ef03975425cb48d4f93c007a56f082efaa145523d2521310a9ab5e4591fb68",
        "address": "0x959922bE3CAee4b8Cd9a407cc3ac1C251C2007B1",
        "topics": [
          "0xea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf9ebb1270f0b6b6ffa55dabf5088d0146a551ccb1568b2e356668c6e09a0a50b"
      }
    ],
    "blockNumber": 17,
    "cumulativeGasUsed": "1489905",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    600,
    "0",
    1652915447
  ],
  "numDeployments": 1,
  "solcInputHash": "d689713f48e152acccfa17dd04efa573",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Bash\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sBash\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_epochLength\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_firstEpochNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_firstEpochTime\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPushed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Bash\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distribute\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"length\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forfeit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"giveLockBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"pushManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"returnLockBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sBash\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ATBASHStaking.CONTRACTS\",\"name\":\"_contract\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_warmupPeriod\",\"type\":\"uint256\"}],\"name\":\"setWarmup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleDepositLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_trigger\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"warmupContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"warmupInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gons\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"warmupPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(address)\":{\"params\":{\"_recipient\":\"address\"}},\"contractBalance()\":{\"returns\":{\"_0\":\"uint\"}},\"giveLockBonus(uint256)\":{\"params\":{\"_amount\":\"uint\"}},\"index()\":{\"returns\":{\"_0\":\"uint\"}},\"returnLockBonus(uint256)\":{\"params\":{\"_amount\":\"uint\"}},\"setContract(uint8,address)\":{\"params\":{\"_contract\":\"address\"}},\"setWarmup(uint256)\":{\"params\":{\"_warmupPeriod\":\"uint\"}},\"stake(uint256,address)\":{\"params\":{\"_amount\":\"uint\"},\"returns\":{\"_0\":\"bool\"}},\"unstake(uint256,bool)\":{\"params\":{\"_amount\":\"uint\",\"_trigger\":\"bool\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(address)\":{\"notice\":\"retrieve sOHM from warmup\"},\"contractBalance()\":{\"notice\":\"returns contract OHM holdings, including bonuses provided\"},\"forfeit()\":{\"notice\":\"forfeit sOHM in warmup and retrieve OHM\"},\"giveLockBonus(uint256)\":{\"notice\":\"provide bonus to locked staking contract\"},\"index()\":{\"notice\":\"returns the sOHM index, which tracks rebase growth\"},\"rebase()\":{\"notice\":\"trigger rebase if epoch over\"},\"returnLockBonus(uint256)\":{\"notice\":\"reclaim bonus from locked staking contract\"},\"setContract(uint8,address)\":{\"notice\":\"sets the contract address for LP staking\"},\"setWarmup(uint256)\":{\"notice\":\"set warmup period in epoch's numbers for new stakers\"},\"stake(uint256,address)\":{\"notice\":\"stake OHM to enter warmup\"},\"toggleDepositLock()\":{\"notice\":\"prevent new deposits to address (protection from malicious activity)\"},\"unstake(uint256,bool)\":{\"notice\":\"redeem sOHM for OHM\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"ATBASHStaking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity 0.7.5;\\r\\n\\r\\nimport {IERC20} from \\\"./interfaces/IERC20.sol\\\";\\r\\nimport {IsBash} from \\\"./interfaces/IsBash.sol\\\";\\r\\nimport {IWarmup} from \\\"./interfaces/IWarmup.sol\\\";\\r\\nimport {SafeERC20} from \\\"./libraries/SafeERC20.sol\\\";\\r\\nimport {SafeMath} from \\\"./libraries/SafeMath.sol\\\";\\r\\nimport {Address} from \\\"./libraries/Address.sol\\\";\\r\\nimport {Ownable} from \\\"./types/Ownable.sol\\\";\\r\\nimport {IDistributor} from \\\"./interfaces/IDistributor.sol\\\";\\r\\n\\r\\ncontract ATBASHStaking is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeMath for uint32;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    address public immutable Bash;\\r\\n    address public immutable sBash;\\r\\n\\r\\n    struct Epoch {\\r\\n        uint256 number;\\r\\n        uint256 distribute;\\r\\n        uint32 length;\\r\\n        uint32 endTime;\\r\\n    }\\r\\n    Epoch public epoch;\\r\\n\\r\\n    address public distributor;\\r\\n\\r\\n    address public locker;\\r\\n    uint256 public totalBonus;\\r\\n\\r\\n    address public warmupContract;\\r\\n    uint256 public warmupPeriod;\\r\\n\\r\\n    constructor(\\r\\n        address _Bash,\\r\\n        address _sBash,\\r\\n        uint32 _epochLength,\\r\\n        uint256 _firstEpochNumber,\\r\\n        uint32 _firstEpochTime\\r\\n    ) {\\r\\n        require(_Bash != address(0));\\r\\n        Bash = _Bash;\\r\\n        require(_sBash != address(0));\\r\\n        sBash = _sBash;\\r\\n\\r\\n        epoch = Epoch({\\r\\n            length: _epochLength,\\r\\n            number: _firstEpochNumber,\\r\\n            endTime: _firstEpochTime,\\r\\n            distribute: 0\\r\\n        });\\r\\n    }\\r\\n\\r\\n    struct Claim {\\r\\n        uint256 deposit;\\r\\n        uint256 gons;\\r\\n        uint256 expiry;\\r\\n        bool lock; // prevents malicious delays\\r\\n    }\\r\\n    mapping(address => Claim) public warmupInfo;\\r\\n\\r\\n    /**\\r\\n        @notice stake OHM to enter warmup\\r\\n        @param _amount uint\\r\\n        @return bool\\r\\n     */\\r\\n    function stake(uint256 _amount, address _recipient)\\r\\n        external\\r\\n        returns (bool)\\r\\n    {\\r\\n        rebase();\\r\\n\\r\\n        IERC20(Bash).safeTransferFrom(msg.sender, address(this), _amount); // Time = Ohm = Bash\\r\\n\\r\\n        Claim memory info = warmupInfo[_recipient];\\r\\n        require(!info.lock, \\\"Deposits for account are locked\\\");\\r\\n\\r\\n        warmupInfo[_recipient] = Claim({\\r\\n            deposit: info.deposit.add(_amount),\\r\\n            gons: info.gons.add(IsBash(sBash).gonsForBalance(_amount)),\\r\\n            expiry: epoch.number.add(warmupPeriod),\\r\\n            lock: false\\r\\n        });\\r\\n        IERC20(sBash).safeTransfer(warmupContract, _amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice retrieve sOHM from warmup\\r\\n        @param _recipient address\\r\\n     */\\r\\n    function claim(address _recipient) public {\\r\\n        Claim memory info = warmupInfo[_recipient];\\r\\n        if (epoch.number >= info.expiry && info.expiry != 0) {\\r\\n            delete warmupInfo[_recipient];\\r\\n            IWarmup(warmupContract).retrieve(\\r\\n                _recipient,\\r\\n                IsBash(sBash).balanceForGons(info.gons)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice forfeit sOHM in warmup and retrieve OHM\\r\\n     */\\r\\n    function forfeit() external {\\r\\n        Claim memory info = warmupInfo[msg.sender];\\r\\n        delete warmupInfo[msg.sender];\\r\\n\\r\\n        IWarmup(warmupContract).retrieve(\\r\\n            address(this),\\r\\n            IsBash(sBash).balanceForGons(info.gons)\\r\\n        );\\r\\n        IERC20(Bash).safeTransfer(msg.sender, info.deposit);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice prevent new deposits to address (protection from malicious activity)\\r\\n     */\\r\\n    function toggleDepositLock() external {\\r\\n        warmupInfo[msg.sender].lock = !warmupInfo[msg.sender].lock;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice redeem sOHM for OHM\\r\\n        @param _amount uint\\r\\n        @param _trigger bool\\r\\n     */\\r\\n    function unstake(uint256 _amount, bool _trigger) external {\\r\\n        if (_trigger) {\\r\\n            rebase();\\r\\n        }\\r\\n        IERC20(sBash).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        IERC20(Bash).safeTransfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice returns the sOHM index, which tracks rebase growth\\r\\n        @return uint\\r\\n     */\\r\\n    function index() public view returns (uint256) {\\r\\n        return IsBash(sBash).index();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice trigger rebase if epoch over\\r\\n     */\\r\\n    function rebase() public {\\r\\n        if (epoch.endTime <= uint32(block.timestamp)) {\\r\\n            IsBash(sBash).rebase(epoch.distribute, epoch.number);\\r\\n            epoch.endTime = epoch.endTime.add32(epoch.length);\\r\\n            epoch.number++;\\r\\n\\r\\n            if (distributor != address(0)) {\\r\\n                IDistributor(distributor).distribute();\\r\\n            }\\r\\n\\r\\n            uint256 balance = contractBalance(); // amount of BASH in contract\\r\\n            uint256 staked = IsBash(sBash).circulatingSupply(); // amount of unstaked sbash\\r\\n            if (balance <= staked) {\\r\\n                epoch.distribute = 0;\\r\\n            } else {\\r\\n                epoch.distribute = balance.sub(staked);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice returns contract OHM holdings, including bonuses provided\\r\\n        @return uint\\r\\n     */\\r\\n    function contractBalance() public view returns (uint256) {\\r\\n        return IERC20(Bash).balanceOf(address(this)).add(totalBonus);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice provide bonus to locked staking contract\\r\\n        @param _amount uint\\r\\n     */\\r\\n    function giveLockBonus(uint256 _amount) external {\\r\\n        require(msg.sender == locker);\\r\\n        totalBonus = totalBonus.add(_amount);\\r\\n        IERC20(sBash).safeTransfer(locker, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice reclaim bonus from locked staking contract\\r\\n        @param _amount uint\\r\\n     */\\r\\n    function returnLockBonus(uint256 _amount) external {\\r\\n        require(msg.sender == locker);\\r\\n        totalBonus = totalBonus.sub(_amount);\\r\\n        IERC20(sBash).safeTransferFrom(locker, address(this), _amount);\\r\\n    }\\r\\n\\r\\n    enum CONTRACTS {\\r\\n        DISTRIBUTOR,\\r\\n        WARMUP,\\r\\n        LOCKER\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice sets the contract address for LP staking\\r\\n        @param _contract address\\r\\n     */\\r\\n    function setContract(CONTRACTS _contract, address _address)\\r\\n        external\\r\\n        onlyManager\\r\\n    {\\r\\n        if (_contract == CONTRACTS.DISTRIBUTOR) {\\r\\n            // 0\\r\\n            distributor = _address;\\r\\n        } else if (_contract == CONTRACTS.WARMUP) {\\r\\n            // 1\\r\\n            require(\\r\\n                warmupContract == address(0),\\r\\n                \\\"Warmup cannot be set more than once\\\"\\r\\n            );\\r\\n            warmupContract = _address;\\r\\n        } else if (_contract == CONTRACTS.LOCKER) {\\r\\n            // 2\\r\\n            require(\\r\\n                locker == address(0),\\r\\n                \\\"Locker cannot be set more than once\\\"\\r\\n            );\\r\\n            locker = _address;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice set warmup period in epoch's numbers for new stakers\\r\\n     * @param _warmupPeriod uint\\r\\n     */\\r\\n    function setWarmup(uint256 _warmupPeriod) external onlyManager {\\r\\n        warmupPeriod = _warmupPeriod;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1a030a78ba05f48eb361d898d6c5e843487462c20dad1eda8a7a789f80909cbb\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity 0.7.5;\\r\\n\\r\\ninterface IDistributor {\\r\\n    function distribute() external returns (bool);\\r\\n}\",\"keccak256\":\"0x48fc9d68ea72484e3940e961ed267a4803506bf00326f0422e007d01ba429c3f\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity 0.7.5;\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the decimals of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0xd2dbf3d69a22df3aaa56a1a70285cfe9d4c180c4724a4c7b63a851c779733092\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity 0.7.5;\\r\\n\\r\\ninterface IOwnable {\\r\\n    function manager() external view returns (address);\\r\\n\\r\\n    function renounceManagement() external;\\r\\n\\r\\n    function pushManagement(address newOwner_) external;\\r\\n\\r\\n    function pullManagement() external;\\r\\n}\",\"keccak256\":\"0x40274195f8ab0a38df8cfdfeb429689192522e895ead7a52279c1c809a02afe5\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IWarmup.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity 0.7.5;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IWarmup is IERC20 {\\r\\n    function retrieve( address staker_, uint amount_ ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x5e6052feb3ad43b302c39bc8505b9d8feaa864d71392191d3dd41945343612bf\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IsBash.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity >=0.7.5;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IsBash is IERC20 {\\r\\n    function rebase( uint256 ohmProfit_, uint epoch_) external returns (uint256);\\r\\n\\r\\n    function circulatingSupply() external view returns (uint256);\\r\\n\\r\\n    // function balanceOf(address who) external view returns (uint256);\\r\\n\\r\\n    function gonsForBalance( uint amount ) external view returns ( uint );\\r\\n\\r\\n    function balanceForGons( uint gons ) external view returns ( uint );\\r\\n    \\r\\n    function index() external view returns ( uint );\\r\\n}\\r\\n\",\"keccak256\":\"0x668290b1bbcdb9db3ff6d0cfcce69887c0450bf5244ec92c147d2f4e8015f9af\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.7.5;\\r\\n\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies in extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard}\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data)\\r\\n        internal\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 weiValue,\\r\\n        string memory errorMessage\\r\\n    ) private returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\\r\\n            data\\r\\n        );\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data)\\r\\n        internal\\r\\n        view\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data)\\r\\n        internal\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) private pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addressToString(address _address)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        bytes32 _bytes = bytes32(uint256(_address));\\r\\n        bytes memory HEX = \\\"0123456789abcdef\\\";\\r\\n        bytes memory _addr = new bytes(42);\\r\\n\\r\\n        _addr[0] = \\\"0\\\";\\r\\n        _addr[1] = \\\"x\\\";\\r\\n\\r\\n        for (uint256 i = 0; i < 20; i++) {\\r\\n            _addr[2 + i * 2] = HEX[uint8(_bytes[i + 12] >> 4)];\\r\\n            _addr[3 + i * 2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\\r\\n        }\\r\\n\\r\\n        return string(_addr);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x4a40552e053b7fe4b4511f72dfc941504d73715f6a1f8edb51acaf4bf501030b\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity 0.7.5;\\r\\n\\r\\nimport {Address} from \\\"../libraries/Address.sol\\\";\\r\\nimport {SafeMath} from \\\"../libraries/SafeMath.sol\\\";\\r\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(\\r\\n            value\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\r\\n            value,\\r\\n            \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x67944930c9dc869035a9363282e775d2260a4ed61aa1a8ceb0769e7a5d189f72\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity 0.7.5;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function add32(uint32 a, uint32 b) internal pure returns (uint32) {\\r\\n        uint32 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        assert(a == b * c + (a % b)); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xacd37098284387cece52cc4e75e8962f1b3918ba0a3279fd55613a25eae3953b\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/types/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity 0.7.5;\\r\\n\\r\\nimport \\\"../interfaces/IOwnable.sol\\\";\\r\\n\\r\\ncontract Ownable is IOwnable {\\r\\n    address internal _owner;\\r\\n    address internal _newOwner;\\r\\n\\r\\n    event OwnershipPushed(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n    event OwnershipPulled(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        _owner = msg.sender;\\r\\n        emit OwnershipPushed(address(0), _owner);\\r\\n    }\\r\\n\\r\\n    function manager() public view override returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyManager() {\\r\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceManagement() public virtual override onlyManager {\\r\\n        emit OwnershipPushed(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function pushManagement(address newOwner_)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        onlyManager\\r\\n    {\\r\\n        require(\\r\\n            newOwner_ != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        emit OwnershipPushed(_owner, newOwner_);\\r\\n        _newOwner = newOwner_;\\r\\n    }\\r\\n\\r\\n    function pullManagement() public virtual override {\\r\\n        require(msg.sender == _newOwner, \\\"Ownable: must be new owner to pull\\\");\\r\\n        emit OwnershipPulled(_owner, _newOwner);\\r\\n        _owner = _newOwner;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x3a7c3151e8e1431e2601ed07ff17afb7e2adf4568b79142f6280f02df2b08435\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051611ac4380380611ac4833981810160405260a081101561003357600080fd5b50805160208201516040808401516060850151608090950151600080546001600160a01b031916331780825593519596949592949391926001600160a01b0392909216917fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba908290a36001600160a01b0385166100af57600080fd5b6001600160601b0319606086901b166080526001600160a01b0384166100d457600080fd5b6001600160601b0319606094851b1660a0526040805160808101825283815260006020820181905263ffffffff95861692820183905292909416939094018390526002919091556003556004805464010000000090920263ffffffff60201b1963ffffffff19909316909317919091169190911790555060805160601c60a05160601c61190a6101ba6000398061041152806105ac528061068d5280610a165280610b225280610dd85280610e565280610fe6528061111552806111d1528061131952508061071752806109205280610cd95280610e0d52806112b8525061190a6000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80638f077b83116100de578063c9f464ff11610097578063ed4acaa811610071578063ed4acaa8146103a4578063f13e7b01146103ac578063f3d86e4a146103b4578063f62ae76a146103bc57610173565b8063c9f464ff14610377578063d7b96d4e14610394578063deac361a1461039c57610173565b80638f077b83146102fe578063900cf0cf146103065780639ebea88c1461033a578063a8dd07dc1461035f578063af14052c14610367578063bfe109281461036f57610173565b8063481c6a7511610130578063481c6a75146102295780635a96ac0a146102315780636746f4c2146102395780637acb775714610287578063865e6fd3146102c75780638b7afe2e146102f657610173565b806303c2367014610178578063089208d8146101975780631e83409a1461019f5780632986c0e5146101c55780633c4e6da7146101df57806346f68ee914610203575b600080fd5b6101956004803603602081101561018e57600080fd5b50356103d9565b005b61019561043d565b610195600480360360208110156101b557600080fd5b50356001600160a01b03166104d4565b6101cd610689565b60408051918252519081900360200190f35b6101e7610715565b604080516001600160a01b039092168252519081900360200190f35b6101956004803603602081101561021957600080fd5b50356001600160a01b0316610739565b6101e7610826565b610195610835565b61025f6004803603602081101561024f57600080fd5b50356001600160a01b03166108df565b6040805194855260208501939093528383019190915215156060830152519081900360800190f35b6102b36004803603604081101561029d57600080fd5b50803590602001356001600160a01b0316610909565b604080519115158252519081900360200190f35b610195600480360360408110156102dd57600080fd5b50803560ff1690602001356001600160a01b0316610b55565b6101cd610ccf565b610195610d7b565b61030e610d9f565b60408051948552602085019390935263ffffffff91821684840152166060830152519081900360800190f35b6101956004803603604081101561035057600080fd5b50803590602001351515610dbd565b6101cd610e34565b610195610e3a565b6101e761108e565b6101956004803603602081101561038d57600080fd5b503561109d565b6101e76110ef565b6101cd6110fe565b6101e7611104565b6101e7611113565b610195611137565b610195600480360360208110156103d257600080fd5b50356112e1565b6006546001600160a01b031633146103f057600080fd5b6007546103fd9082611343565b60075560065461043a906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169116836113a4565b50565b6000546001600160a01b0316331461048a576040805162461bcd60e51b8152602060048201819052602482015260008051602061188b833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba908390a3600080546001600160a01b0319169055565b6104dc6117d2565b506001600160a01b0381166000908152600a602090815260409182902082516080810184528154815260018201549281019290925260028082015493830184905260039091015460ff1615156060830152549091118015906105415750604081015115155b15610685576001600160a01b038083166000908152600a602090815260408083208381556001810184905560028101939093556003909201805460ff19169055600854848201518351637965d56d60e01b8152600481019190915292519084169363c3a2a6659387937f000000000000000000000000000000000000000000000000000000000000000090921692637965d56d92602480840193919291829003018186803b1580156105f257600080fd5b505afa158015610606573d6000803e3d6000fd5b505050506040513d602081101561061c57600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b039093166004840152602483019190915251604480830192600092919082900301818387803b15801561066c57600080fd5b505af1158015610680573d6000803e3d6000fd5b505050505b5050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632986c0e56040518163ffffffff1660e01b815260040160206040518083038186803b1580156106e457600080fd5b505afa1580156106f8573d6000803e3d6000fd5b505050506040513d602081101561070e57600080fd5b5051905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b03163314610786576040805162461bcd60e51b8152602060048201819052602482015260008051602061188b833981519152604482015290519081900360640190fd5b6001600160a01b0381166107cb5760405162461bcd60e51b81526004018080602001828103825260268152602001806118206026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba91a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b6001546001600160a01b0316331461087e5760405162461bcd60e51b81526004018080602001828103825260228152602001806118696022913960400191505060405180910390fd5b600154600080546040516001600160a01b0393841693909116917faa151555690c956fc3ea32f106bb9f119b5237a061eaa8557cff3e51e3792c8d91a3600154600080546001600160a01b0319166001600160a01b03909216919091179055565b600a6020526000908152604090208054600182015460028301546003909301549192909160ff1684565b6000610913610e3a565b6109486001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330866113fb565b6109506117d2565b506001600160a01b0382166000908152600a602090815260409182902082516080810184528154815260018201549281019290925260028101549282019290925260039091015460ff1615801560608301526109f3576040805162461bcd60e51b815260206004820152601f60248201527f4465706f7369747320666f72206163636f756e7420617265206c6f636b656400604482015290519081900360640190fd5b604080516080810190915281518190610a0c9087611343565b8152602001610aaf7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631bd39674886040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610a7857600080fd5b505afa158015610a8c573d6000803e3d6000fd5b505050506040513d6020811015610aa257600080fd5b5051602085015190611343565b8152600954600254602090920191610ac691611343565b8152600060209182018190526001600160a01b038681168252600a8352604091829020845181559284015160018401559083015160028301556060909201516003909101805460ff1916911515919091179055600854610b4b917f000000000000000000000000000000000000000000000000000000000000000081169116866113a4565b5060019392505050565b6000546001600160a01b03163314610ba2576040805162461bcd60e51b8152602060048201819052602482015260008051602061188b833981519152604482015290519081900360640190fd5b6000826002811115610bb057fe5b1415610bd657600580546001600160a01b0319166001600160a01b038316179055610685565b6001826002811115610be457fe5b1415610c52576008546001600160a01b031615610c325760405162461bcd60e51b81526004018080602001828103825260238152602001806118466023913960400191505060405180910390fd5b600880546001600160a01b0319166001600160a01b038316179055610685565b6002826002811115610c6057fe5b1415610685576006546001600160a01b031615610cae5760405162461bcd60e51b81526004018080602001828103825260238152602001806117fd6023913960400191505060405180910390fd5b600680546001600160a01b0383166001600160a01b03199091161790555050565b6000610d766007547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610d4457600080fd5b505afa158015610d58573d6000803e3d6000fd5b505050506040513d6020811015610d6e57600080fd5b505190611343565b905090565b336000908152600a60205260409020600301805460ff19811660ff90911615179055565b60025460035460045463ffffffff8082169164010000000090041684565b8015610dcb57610dcb610e3a565b610e006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330856113fb565b6106856001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633846113a4565b60075481565b60045463ffffffff428116640100000000909204161161108c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663058ecdb46002600101546002600001546040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b158015610ecc57600080fd5b505af1158015610ee0573d6000803e3d6000fd5b505050506040513d6020811015610ef657600080fd5b5050600454610f189063ffffffff640100000000820481169181169061145b16565b6004805463ffffffff929092166401000000000267ffffffff00000000199092169190911790556002805460010190556005546001600160a01b031615610fd657600560009054906101000a90046001600160a01b03166001600160a01b031663e4fc6b6d6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610fa957600080fd5b505af1158015610fbd573d6000803e3d6000fd5b505050506040513d6020811015610fd357600080fd5b50505b6000610fe0610ccf565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639358928b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561103d57600080fd5b505afa158015611051573d6000803e3d6000fd5b505050506040513d602081101561106757600080fd5b5051905080821161107c576000600355610685565b61108682826114be565b60035550505b565b6005546001600160a01b031681565b6000546001600160a01b031633146110ea576040805162461bcd60e51b8152602060048201819052602482015260008051602061188b833981519152604482015290519081900360640190fd5b600955565b6006546001600160a01b031681565b60095481565b6008546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b61113f6117d2565b50336000818152600a602081815260408084208151608081018352815481526001820180548286019081526002840180548487015260038501805460ff8116151560608701529a8a5297875293889055908790559590915560ff1990951690925560085492518251637965d56d60e01b8152600481019190915291516001600160a01b039384169363c3a2a6659330937f000000000000000000000000000000000000000000000000000000000000000090921692637965d56d92602480840193919291829003018186803b15801561121757600080fd5b505afa15801561122b573d6000803e3d6000fd5b505050506040513d602081101561124157600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b039093166004840152602483019190915251604480830192600092919082900301818387803b15801561129157600080fd5b505af11580156112a5573d6000803e3d6000fd5b5050825161043a92506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016915033906113a4565b6006546001600160a01b031633146112f857600080fd5b60075461130590826114be565b60075560065461043a906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911630846113fb565b60008282018381101561139d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526113f6908490611500565b505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611455908590611500565b50505050565b600082820163ffffffff808516908216101561139d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061139d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506115b1565b6060611555826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116489092919063ffffffff16565b8051909150156113f65780806020019051602081101561157457600080fd5b50516113f65760405162461bcd60e51b815260040180806020018281038252602a8152602001806118ab602a913960400191505060405180910390fd5b600081848411156116405760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156116055781810151838201526020016115ed565b50505050905090810190601f1680156116325780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6060611657848460008561165f565b949350505050565b606061166a856117cc565b6116bb576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106116fa5780518252601f1990920191602091820191016116db565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461175c576040519150601f19603f3d011682016040523d82523d6000602084013e611761565b606091505b509150915081156117755791506116579050565b8051156117855780518082602001fd5b60405162461bcd60e51b81526020600482018181528651602484015286518793919283926044019190850190808383600083156116055781810151838201526020016115ed565b3b151590565b6040518060800160405280600081526020016000815260200160008152602001600015158152509056fe4c6f636b65722063616e6e6f7420626520736574206d6f7265207468616e206f6e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735761726d75702063616e6e6f7420626520736574206d6f7265207468616e206f6e63654f776e61626c653a206d757374206265206e6577206f776e657220746f2070756c6c4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a264697066735822122017d35750d962516a83fabcda80b96b1a341ec707153ceceed75c0cf7febbf8da64736f6c63430007050033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim(address)": {
        "params": {
          "_recipient": "address"
        }
      },
      "contractBalance()": {
        "returns": {
          "_0": "uint"
        }
      },
      "giveLockBonus(uint256)": {
        "params": {
          "_amount": "uint"
        }
      },
      "index()": {
        "returns": {
          "_0": "uint"
        }
      },
      "returnLockBonus(uint256)": {
        "params": {
          "_amount": "uint"
        }
      },
      "setContract(uint8,address)": {
        "params": {
          "_contract": "address"
        }
      },
      "setWarmup(uint256)": {
        "params": {
          "_warmupPeriod": "uint"
        }
      },
      "stake(uint256,address)": {
        "params": {
          "_amount": "uint"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "unstake(uint256,bool)": {
        "params": {
          "_amount": "uint",
          "_trigger": "bool"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim(address)": {
        "notice": "retrieve sOHM from warmup"
      },
      "contractBalance()": {
        "notice": "returns contract OHM holdings, including bonuses provided"
      },
      "forfeit()": {
        "notice": "forfeit sOHM in warmup and retrieve OHM"
      },
      "giveLockBonus(uint256)": {
        "notice": "provide bonus to locked staking contract"
      },
      "index()": {
        "notice": "returns the sOHM index, which tracks rebase growth"
      },
      "rebase()": {
        "notice": "trigger rebase if epoch over"
      },
      "returnLockBonus(uint256)": {
        "notice": "reclaim bonus from locked staking contract"
      },
      "setContract(uint8,address)": {
        "notice": "sets the contract address for LP staking"
      },
      "setWarmup(uint256)": {
        "notice": "set warmup period in epoch's numbers for new stakers"
      },
      "stake(uint256,address)": {
        "notice": "stake OHM to enter warmup"
      },
      "toggleDepositLock()": {
        "notice": "prevent new deposits to address (protection from malicious activity)"
      },
      "unstake(uint256,bool)": {
        "notice": "redeem sOHM for OHM"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21228,
        "contract": "contracts/Staking.sol:ATBASHStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 21230,
        "contract": "contracts/Staking.sol:ATBASHStaking",
        "label": "_newOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 12117,
        "contract": "contracts/Staking.sol:ATBASHStaking",
        "label": "epoch",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Epoch)12115_storage"
      },
      {
        "astId": 12119,
        "contract": "contracts/Staking.sol:ATBASHStaking",
        "label": "distributor",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 12121,
        "contract": "contracts/Staking.sol:ATBASHStaking",
        "label": "locker",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 12123,
        "contract": "contracts/Staking.sol:ATBASHStaking",
        "label": "totalBonus",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 12125,
        "contract": "contracts/Staking.sol:ATBASHStaking",
        "label": "warmupContract",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 12127,
        "contract": "contracts/Staking.sol:ATBASHStaking",
        "label": "warmupPeriod",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 12189,
        "contract": "contracts/Staking.sol:ATBASHStaking",
        "label": "warmupInfo",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_struct(Claim)12185_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Claim)12185_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ATBASHStaking.Claim)",
        "numberOfBytes": "32",
        "value": "t_struct(Claim)12185_storage"
      },
      "t_struct(Claim)12185_storage": {
        "encoding": "inplace",
        "label": "struct ATBASHStaking.Claim",
        "members": [
          {
            "astId": 12178,
            "contract": "contracts/Staking.sol:ATBASHStaking",
            "label": "deposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12180,
            "contract": "contracts/Staking.sol:ATBASHStaking",
            "label": "gons",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12182,
            "contract": "contracts/Staking.sol:ATBASHStaking",
            "label": "expiry",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12184,
            "contract": "contracts/Staking.sol:ATBASHStaking",
            "label": "lock",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Epoch)12115_storage": {
        "encoding": "inplace",
        "label": "struct ATBASHStaking.Epoch",
        "members": [
          {
            "astId": 12108,
            "contract": "contracts/Staking.sol:ATBASHStaking",
            "label": "number",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12110,
            "contract": "contracts/Staking.sol:ATBASHStaking",
            "label": "distribute",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12112,
            "contract": "contracts/Staking.sol:ATBASHStaking",
            "label": "length",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 12114,
            "contract": "contracts/Staking.sol:ATBASHStaking",
            "label": "endTime",
            "offset": 4,
            "slot": "2",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}