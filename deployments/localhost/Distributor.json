{
  "address": "0xdC543ee8f8a09DC9a9eFF532364eB8735abCE0c3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_Bash",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_epochLength",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_nextEpochTime",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "Bash",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardRate",
          "type": "uint256"
        }
      ],
      "name": "addRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "adjustments",
      "outputs": [
        {
          "internalType": "bool",
          "name": "add",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distribute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochLength",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "info",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextEpochTime",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "nextRewardAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "nextRewardFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pullPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPolicy_",
          "type": "address"
        }
      ],
      "name": "pushPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "removeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_add",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_target",
          "type": "uint256"
        }
      ],
      "name": "setAdjustment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdabfab43eff90c6a4230fb1f3de7d09f7854ca6b8c665e054a4a86c1183d8fb5",
  "receipt": {
    "to": null,
    "from": "0x02c368c0787BB33ACAc698049CcA2454B5cC96c5",
    "contractAddress": "0xdC543ee8f8a09DC9a9eFF532364eB8735abCE0c3",
    "transactionIndex": 0,
    "gasUsed": "984180",
    "logsBloom": "0x
    "blockHash": "0xbb8c0bd2773b4d5b81115e86a745480724a4478ff9fcdd43d640288c609e0690",
    "transactionHash": "0xdabfab43eff90c6a4230fb1f3de7d09f7854ca6b8c665e054a4a86c1183d8fb5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10921560,
        "transactionHash": "0xdabfab43eff90c6a4230fb1f3de7d09f7854ca6b8c665e054a4a86c1183d8fb5",
        "address": "0xdC543ee8f8a09DC9a9eFF532364eB8735abCE0c3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000002c368c0787bb33acac698049cca2454b5cc96c5"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xbb8c0bd2773b4d5b81115e86a745480724a4478ff9fcdd43d640288c609e0690"
      }
    ],
    "blockNumber": 10921560,
    "cumulativeGasUsed": "984180",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xac4EbFf8880380dFc132c2CC53Ac5FB835540030",
    "0xf7A1D14EC3a45dA9bde66E6b91e68aDc32fa4498",
    900,
    1656279970
  ],
  "numDeployments": 1,
  "solcInputHash": "4afd1fb9c7d62c1570cf50aee34d064b",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Bash\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_epochLength\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_nextEpochTime\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Bash\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"name\":\"addRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adjustments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochLength\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"info\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"nextRewardAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"nextRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPolicy_\",\"type\":\"address\"}],\"name\":\"pushPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"removeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_add\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"}],\"name\":\"setAdjustment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addRecipient(address,uint256)\":{\"params\":{\"_recipient\":\"address\",\"_rewardRate\":\"uint\"}},\"nextRewardAt(uint256)\":{\"params\":{\"_rate\":\"uint\"},\"returns\":{\"_0\":\"uint\"}},\"nextRewardFor(address)\":{\"params\":{\"_recipient\":\"address\"},\"returns\":{\"_0\":\"uint\"}},\"removeRecipient(uint256,address)\":{\"params\":{\"_index\":\"uint\",\"_recipient\":\"address\"}},\"setAdjustment(uint256,bool,uint256,uint256)\":{\"params\":{\"_add\":\"bool\",\"_index\":\"uint\",\"_rate\":\"uint\",\"_target\":\"uint\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addRecipient(address,uint256)\":{\"notice\":\"adds recipient for distributions\"},\"distribute()\":{\"notice\":\"send epoch reward to staking contract\"},\"nextRewardAt(uint256)\":{\"notice\":\"view function for next reward at given rate\"},\"nextRewardFor(address)\":{\"notice\":\"view function for next reward for specified address\"},\"removeRecipient(uint256,address)\":{\"notice\":\"removes recipient for distributions\"},\"setAdjustment(uint256,bool,uint256,uint256)\":{\"notice\":\"set adjustment info for a collector's reward rate\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingDistributor.sol\":\"Distributor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/StakingDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\n\\r\\npragma solidity 0.7.5;\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender)\\r\\n            .sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function add32(uint32 a, uint32 b) internal pure returns (uint32) {\\r\\n        uint32 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\r\\n    function sqrrt(uint256 a) internal pure returns (uint c) {\\r\\n        if (a > 3) {\\r\\n            c = a;\\r\\n            uint b = add( div( a, 2), 1 );\\r\\n            while (b < c) {\\r\\n                c = b;\\r\\n                b = div( add( div( a, b ), b), 2 );\\r\\n            }\\r\\n        } else if (a != 0) {\\r\\n            c = 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function percentageAmount( uint256 total_, uint8 percentage_ ) internal pure returns ( uint256 percentAmount_ ) {\\r\\n        return div( mul( total_, percentage_ ), 1000 );\\r\\n    }\\r\\n\\r\\n    function substractPercentage( uint256 total_, uint8 percentageToSub_ ) internal pure returns ( uint256 result_ ) {\\r\\n        return sub( total_, div( mul( total_, percentageToSub_ ), 1000 ) );\\r\\n    }\\r\\n\\r\\n    function percentageOfTotal( uint256 part_, uint256 total_ ) internal pure returns ( uint256 percent_ ) {\\r\\n        return div( mul(part_, 100) , total_ );\\r\\n    }\\r\\n\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow, so we distribute\\r\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\r\\n    }\\r\\n\\r\\n    function quadraticPricing( uint256 payment_, uint256 multiplier_ ) internal pure returns (uint256) {\\r\\n        return sqrrt( mul( multiplier_, payment_ ) );\\r\\n    }\\r\\n\\r\\n  function bondingCurve( uint256 supply_, uint256 multiplier_ ) internal pure returns (uint256) {\\r\\n      return mul( multiplier_, supply_ );\\r\\n  }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\nlibrary Address {\\r\\n\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies in extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    function functionCall(\\r\\n        address target, \\r\\n        bytes memory data, \\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    function functionCallWithValue(\\r\\n        address target, \\r\\n        bytes memory data, \\r\\n        uint256 value, \\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _functionCallWithValue(\\r\\n        address target, \\r\\n        bytes memory data, \\r\\n        uint256 weiValue, \\r\\n        string memory errorMessage\\r\\n    ) private returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    function functionStaticCall(\\r\\n        address target, \\r\\n        bytes memory data, \\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    function functionDelegateCall(\\r\\n        address target, \\r\\n        bytes memory data, \\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(\\r\\n        bool success, \\r\\n        bytes memory returndata, \\r\\n        string memory errorMessage\\r\\n    ) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            if (returndata.length > 0) {\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addressToString(address _address) internal pure returns(string memory) {\\r\\n        bytes32 _bytes = bytes32(uint256(_address));\\r\\n        bytes memory HEX = \\\"0123456789abcdef\\\";\\r\\n        bytes memory _addr = new bytes(42);\\r\\n\\r\\n        _addr[0] = '0';\\r\\n        _addr[1] = 'x';\\r\\n\\r\\n        for(uint256 i = 0; i < 20; i++) {\\r\\n            _addr[2+i*2] = HEX[uint8(_bytes[i + 12] >> 4)];\\r\\n            _addr[3+i*2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\\r\\n        }\\r\\n\\r\\n        return string(_addr);\\r\\n\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ninterface IPolicy {\\r\\n\\r\\n    function policy() external view returns (address);\\r\\n\\r\\n    function renouncePolicy() external;\\r\\n  \\r\\n    function pushPolicy( address newPolicy_ ) external;\\r\\n\\r\\n    function pullPolicy() external;\\r\\n}\\r\\n\\r\\ncontract Policy is IPolicy {\\r\\n    \\r\\n    address internal _policy;\\r\\n    address internal _newPolicy;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor () {\\r\\n        _policy = msg.sender;\\r\\n        emit OwnershipTransferred( address(0), _policy );\\r\\n    }\\r\\n\\r\\n    function policy() public view override returns (address) {\\r\\n        return _policy;\\r\\n    }\\r\\n\\r\\n    modifier onlyPolicy() {\\r\\n        require( _policy == msg.sender, \\\"Ownable: caller is not the owner\\\" );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renouncePolicy() public virtual override onlyPolicy() {\\r\\n        emit OwnershipTransferred( _policy, address(0) );\\r\\n        _policy = address(0);\\r\\n    }\\r\\n\\r\\n    function pushPolicy( address newPolicy_ ) public virtual override onlyPolicy() {\\r\\n        require( newPolicy_ != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _newPolicy = newPolicy_;\\r\\n    }\\r\\n\\r\\n    function pullPolicy() public virtual override {\\r\\n        require( msg.sender == _newPolicy );\\r\\n        emit OwnershipTransferred( _policy, _newPolicy );\\r\\n        _policy = _newPolicy;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface ITreasury {\\r\\n    function mintRewards( address _recipient, uint _amount ) external;\\r\\n}\\r\\n\\r\\ncontract Distributor is Policy {\\r\\n    using SafeMath for uint;\\r\\n    using SafeMath for uint32;\\r\\n    using SafeERC20 for IERC20;\\r\\n    \\r\\n    \\r\\n    \\r\\n    /* ====== VARIABLES ====== */\\r\\n\\r\\n    address public immutable Bash;\\r\\n    address public immutable treasury;\\r\\n    \\r\\n    uint32 public immutable epochLength;\\r\\n    uint32 public nextEpochTime;\\r\\n    \\r\\n    mapping( uint => Adjust ) public adjustments;\\r\\n    \\r\\n    \\r\\n    /* ====== STRUCTS ====== */\\r\\n        \\r\\n    struct Info {\\r\\n        uint rate; // in ten-thousandths ( 5000 = 0.5% )\\r\\n        address recipient;\\r\\n    }\\r\\n    Info[] public info;\\r\\n    \\r\\n    struct Adjust {\\r\\n        bool add;\\r\\n        uint rate;\\r\\n        uint target;\\r\\n    }\\r\\n    \\r\\n    \\r\\n    \\r\\n    /* ====== CONSTRUCTOR ====== */\\r\\n\\r\\n    constructor( address _treasury, address _Bash, uint32 _epochLength, uint32 _nextEpochTime ) {        \\r\\n        require( _treasury != address(0) );\\r\\n        treasury = _treasury;\\r\\n        require( _Bash != address(0) );\\r\\n        Bash = _Bash;\\r\\n        epochLength = _epochLength;\\r\\n        nextEpochTime = _nextEpochTime;\\r\\n    }\\r\\n    \\r\\n    \\r\\n    \\r\\n    /* ====== PUBLIC FUNCTIONS ====== */\\r\\n    \\r\\n    /**\\r\\n        @notice send epoch reward to staking contract\\r\\n     */\\r\\n    function distribute() external returns ( bool ) {\\r\\n        if ( nextEpochTime <= uint32(block.timestamp) ) {\\r\\n            nextEpochTime = nextEpochTime.add32( epochLength ); // set next epoch time\\r\\n            \\r\\n            // distribute rewards to each recipient\\r\\n            for ( uint i = 0; i < info.length; i++ ) {\\r\\n                if ( info[ i ].rate > 0 ) {\\r\\n                    ITreasury( treasury ).mintRewards( // mint and send from treasury\\r\\n                        info[ i ].recipient, \\r\\n                        nextRewardAt( info[ i ].rate ) \\r\\n                    );\\r\\n                    adjust( i ); // check for adjustment\\r\\n                }\\r\\n            }\\r\\n            return true;\\r\\n        } else { \\r\\n            return false; \\r\\n        }\\r\\n    }\\r\\n    \\r\\n    \\r\\n    \\r\\n    /* ====== INTERNAL FUNCTIONS ====== */\\r\\n\\r\\n    /**\\r\\n        @notice increment reward rate for collector\\r\\n     */\\r\\n    function adjust( uint _index ) internal {\\r\\n        Adjust memory adjustment = adjustments[ _index ];\\r\\n        if ( adjustment.rate != 0 ) {\\r\\n            if ( adjustment.add ) { // if rate should increase\\r\\n                info[ _index ].rate = info[ _index ].rate.add( adjustment.rate ); // raise rate\\r\\n                if ( info[ _index ].rate >= adjustment.target ) { // if target met\\r\\n                    adjustments[ _index ].rate = 0; // turn off adjustment\\r\\n                }\\r\\n            } else { // if rate should decrease\\r\\n                info[ _index ].rate = info[ _index ].rate.sub( adjustment.rate ); // lower rate\\r\\n                if ( info[ _index ].rate <= adjustment.target ) { // if target met\\r\\n                    adjustments[ _index ].rate = 0; // turn off adjustment\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    \\r\\n    \\r\\n    /* ====== VIEW FUNCTIONS ====== */\\r\\n\\r\\n    /**\\r\\n        @notice view function for next reward at given rate\\r\\n        @param _rate uint\\r\\n        @return uint\\r\\n     */\\r\\n    function nextRewardAt( uint _rate ) public view returns ( uint ) {\\r\\n        return IERC20( Bash ).totalSupply().mul( _rate ).div( 1000000 );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice view function for next reward for specified address\\r\\n        @param _recipient address\\r\\n        @return uint\\r\\n     */\\r\\n    function nextRewardFor( address _recipient ) public view returns ( uint ) {\\r\\n        uint reward;\\r\\n        for ( uint i = 0; i < info.length; i++ ) {\\r\\n            if ( info[ i ].recipient == _recipient ) {\\r\\n                reward = nextRewardAt( info[ i ].rate );\\r\\n            }\\r\\n        }\\r\\n        return reward;\\r\\n    }\\r\\n    \\r\\n    \\r\\n    \\r\\n    /* ====== POLICY FUNCTIONS ====== */\\r\\n\\r\\n    /**\\r\\n        @notice adds recipient for distributions\\r\\n        @param _recipient address\\r\\n        @param _rewardRate uint\\r\\n     */\\r\\n    function addRecipient( address _recipient, uint _rewardRate ) external onlyPolicy() {\\r\\n        require( _recipient != address(0) );\\r\\n        info.push( Info({\\r\\n            recipient: _recipient,\\r\\n            rate: _rewardRate\\r\\n        }));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice removes recipient for distributions\\r\\n        @param _index uint\\r\\n        @param _recipient address\\r\\n     */\\r\\n    function removeRecipient( uint _index, address _recipient ) external onlyPolicy() {\\r\\n        require( _recipient == info[ _index ].recipient );\\r\\n        info[ _index ].recipient = address(0);\\r\\n        info[ _index ].rate = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice set adjustment info for a collector's reward rate\\r\\n        @param _index uint\\r\\n        @param _add bool\\r\\n        @param _rate uint\\r\\n        @param _target uint\\r\\n     */\\r\\n    function setAdjustment( uint _index, bool _add, uint _rate, uint _target ) external onlyPolicy() {\\r\\n        adjustments[ _index ] = Adjust({\\r\\n            add: _add,\\r\\n            rate: _rate,\\r\\n            target: _target\\r\\n        });\\r\\n    }\\r\\n}\",\"keccak256\":\"0xc44a9d4a2684ee5eb753c7594b0564a941fcfa92d2f50e5c00b2fefb84a88657\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b506040516111453803806111458339818101604052608081101561003357600080fd5b5080516020820151604080840151606090940151600080546001600160a01b031916331780825592519495939491926001600160a01b0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36001600160a01b0384166100a457600080fd5b6001600160601b0319606085901b1660a0526001600160a01b0383166100c957600080fd5b606083811b6001600160601b03191660805260e083901b6001600160e01b03191660c0526001805463ffffffff60a01b1916600160a01b63ffffffff9485160217905560a0516001600160a01b0390941694509290921c9116610ff16101546000398061041252806107e2525080610552528061085e5250806103ee52806107185250610ff16000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806361d027b311610097578063c9fa8b2a11610066578063c9fa8b2a1461027e578063e4fc6b6d1461029b578063f7982243146102b7578063fe3fbbad146102e357610100565b806361d027b31461020b578063a15ad07714610213578063a4b2398014610239578063bc3b2b121461024157610100565b80633c4e6da7116100d35780633c4e6da7146101c057806357d775f8146101c85780635beede08146101d05780635db854b0146101da57610100565b80630505c8c9146101055780631da56eb3146101295780632e3405991461014a57806336d33f4414610188575b600080fd5b61010d61030f565b604080516001600160a01b039092168252519081900360200190f35b61013161031f565b6040805163ffffffff9092168252519081900360200190f35b6101676004803603602081101561016057600080fd5b5035610332565b604080519283526001600160a01b0390911660208301528051918290030190f35b6101ae6004803603602081101561019e57600080fd5b50356001600160a01b0316610369565b60408051918252519081900360200190f35b61010d6103ec565b610131610410565b6101d8610434565b005b6101d8600480360360808110156101f057600080fd5b508035906020810135151590604081013590606001356104ac565b61010d610550565b6101d86004803603602081101561022957600080fd5b50356001600160a01b0316610574565b6101d861063a565b61025e6004803603602081101561025757600080fd5b50356106e3565b604080519315158452602084019290925282820152519081900360600190f35b6101ae6004803603602081101561029457600080fd5b5035610709565b6102a36107ad565b604080519115158252519081900360200190f35b6101d8600480360360408110156102cd57600080fd5b506001600160a01b03813516906020013561094e565b6101d8600480360360408110156102f957600080fd5b50803590602001356001600160a01b0316610a55565b6000546001600160a01b03165b90565b600154600160a01b900463ffffffff1681565b6003818154811061034257600080fd5b6000918252602090912060029091020180546001909101549091506001600160a01b031682565b60008060005b6003548110156103e557836001600160a01b03166003828154811061039057fe5b60009182526020909120600160029092020101546001600160a01b031614156103dd576103da600382815481106103c357fe5b906000526020600020906002020160000154610709565b91505b60010161036f565b5092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001546001600160a01b0316331461044b57600080fd5b600154600080546040516001600160a01b0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600154600080546001600160a01b0319166001600160a01b03909216919091179055565b6000546001600160a01b0316331461050b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6040805160608101825293151584526020808501938452848201928352600095865260029081905294209251835460ff19169015151783559051600183015551910155565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031633146105d3576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166106185760405162461bcd60e51b8152600401808060200182810382526026815260200180610f756026913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610699576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600260208190526000918252604090912080546001820154919092015460ff9092169183565b60006107a7620f42406107a1847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561076f57600080fd5b505afa158015610783573d6000803e3d6000fd5b505050506040513d602081101561079957600080fd5b505190610b54565b90610bb4565b92915050565b60015460009063ffffffff428116600160a01b9092041611610946576001546108089063ffffffff600160a01b9091048116907f000000000000000000000000000000000000000000000000000000000000000090610bf616565b600160146101000a81548163ffffffff021916908363ffffffff16021790555060005b60035481101561093c5760006003828154811061084457fe5b9060005260206000209060020201600001541115610934577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636a20de926003838154811061089857fe5b906000526020600020906002020160010160009054906101000a90046001600160a01b03166108cd600385815481106103c357fe5b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561091357600080fd5b505af1158015610927573d6000803e3d6000fd5b5050505061093481610c59565b60010161082b565b506001905061031c565b50600061031c565b6000546001600160a01b031633146109ad576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0382166109c057600080fd5b604080518082019091529081526001600160a01b03918216602082019081526003805460018101825560009190915291517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b600290930292830155517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c90910180546001600160a01b03191691909216179055565b6000546001600160a01b03163314610ab4576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60038281548110610ac157fe5b60009182526020909120600160029092020101546001600160a01b03828116911614610aec57600080fd5b600060038381548110610afb57fe5b906000526020600020906002020160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600060038381548110610b3f57fe5b60009182526020909120600290910201555050565b600082610b63575060006107a7565b82820282848281610b7057fe5b0414610bad5760405162461bcd60e51b8152600401808060200182810382526021815260200180610f9b6021913960400191505060405180910390fd5b9392505050565b6000610bad83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610dbe565b600082820163ffffffff8085169082161015610bad576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b610c61610f51565b506000818152600260208181526040928390208351606081018552815460ff16151581526001820154928101839052920154928201929092529015610dba57805115610d3357610cd3816020015160038481548110610cbc57fe5b600091825260209091206002909102015490610e60565b60038381548110610ce057fe5b600091825260209091206002909102015560408101516003805484908110610d0457fe5b90600052602060002090600202016000015410610d2e576000828152600260205260408120600101555b610dba565b610d5f816020015160038481548110610d4857fe5b600091825260209091206002909102015490610eba565b60038381548110610d6c57fe5b600091825260209091206002909102015560408101516003805484908110610d9057fe5b90600052602060002090600202016000015411610dba576000828152600260205260408120600101555b5050565b60008183610e4a5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610e0f578181015183820152602001610df7565b50505050905090810190601f168015610e3c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581610e5657fe5b0495945050505050565b600082820183811015610bad576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000610bad83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060008184841115610f495760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610e0f578181015183820152602001610df7565b505050900390565b60405180606001604052806000151581526020016000815260200160008152509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220f051a0b0ed577543915558bd00f8fdb5f4f407170ff844ac98c77f7b14a0988e64736f6c63430007050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c806361d027b311610097578063c9fa8b2a11610066578063c9fa8b2a1461027e578063e4fc6b6d1461029b578063f7982243146102b7578063fe3fbbad146102e357610100565b806361d027b31461020b578063a15ad07714610213578063a4b2398014610239578063bc3b2b121461024157610100565b80633c4e6da7116100d35780633c4e6da7146101c057806357d775f8146101c85780635beede08146101d05780635db854b0146101da57610100565b80630505c8c9146101055780631da56eb3146101295780632e3405991461014a57806336d33f4414610188575b600080fd5b61010d61030f565b604080516001600160a01b039092168252519081900360200190f35b61013161031f565b6040805163ffffffff9092168252519081900360200190f35b6101676004803603602081101561016057600080fd5b5035610332565b604080519283526001600160a01b0390911660208301528051918290030190f35b6101ae6004803603602081101561019e57600080fd5b50356001600160a01b0316610369565b60408051918252519081900360200190f35b61010d6103ec565b610131610410565b6101d8610434565b005b6101d8600480360360808110156101f057600080fd5b508035906020810135151590604081013590606001356104ac565b61010d610550565b6101d86004803603602081101561022957600080fd5b50356001600160a01b0316610574565b6101d861063a565b61025e6004803603602081101561025757600080fd5b50356106e3565b604080519315158452602084019290925282820152519081900360600190f35b6101ae6004803603602081101561029457600080fd5b5035610709565b6102a36107ad565b604080519115158252519081900360200190f35b6101d8600480360360408110156102cd57600080fd5b506001600160a01b03813516906020013561094e565b6101d8600480360360408110156102f957600080fd5b50803590602001356001600160a01b0316610a55565b6000546001600160a01b03165b90565b600154600160a01b900463ffffffff1681565b6003818154811061034257600080fd5b6000918252602090912060029091020180546001909101549091506001600160a01b031682565b60008060005b6003548110156103e557836001600160a01b03166003828154811061039057fe5b60009182526020909120600160029092020101546001600160a01b031614156103dd576103da600382815481106103c357fe5b906000526020600020906002020160000154610709565b91505b60010161036f565b5092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001546001600160a01b0316331461044b57600080fd5b600154600080546040516001600160a01b0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600154600080546001600160a01b0319166001600160a01b03909216919091179055565b6000546001600160a01b0316331461050b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6040805160608101825293151584526020808501938452848201928352600095865260029081905294209251835460ff19169015151783559051600183015551910155565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031633146105d3576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166106185760405162461bcd60e51b8152600401808060200182810382526026815260200180610f756026913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610699576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600260208190526000918252604090912080546001820154919092015460ff9092169183565b60006107a7620f42406107a1847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561076f57600080fd5b505afa158015610783573d6000803e3d6000fd5b505050506040513d602081101561079957600080fd5b505190610b54565b90610bb4565b92915050565b60015460009063ffffffff428116600160a01b9092041611610946576001546108089063ffffffff600160a01b9091048116907f000000000000000000000000000000000000000000000000000000000000000090610bf616565b600160146101000a81548163ffffffff021916908363ffffffff16021790555060005b60035481101561093c5760006003828154811061084457fe5b9060005260206000209060020201600001541115610934577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636a20de926003838154811061089857fe5b906000526020600020906002020160010160009054906101000a90046001600160a01b03166108cd600385815481106103c357fe5b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561091357600080fd5b505af1158015610927573d6000803e3d6000fd5b5050505061093481610c59565b60010161082b565b506001905061031c565b50600061031c565b6000546001600160a01b031633146109ad576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0382166109c057600080fd5b604080518082019091529081526001600160a01b03918216602082019081526003805460018101825560009190915291517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b600290930292830155517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c90910180546001600160a01b03191691909216179055565b6000546001600160a01b03163314610ab4576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60038281548110610ac157fe5b60009182526020909120600160029092020101546001600160a01b03828116911614610aec57600080fd5b600060038381548110610afb57fe5b906000526020600020906002020160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600060038381548110610b3f57fe5b60009182526020909120600290910201555050565b600082610b63575060006107a7565b82820282848281610b7057fe5b0414610bad5760405162461bcd60e51b8152600401808060200182810382526021815260200180610f9b6021913960400191505060405180910390fd5b9392505050565b6000610bad83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610dbe565b600082820163ffffffff8085169082161015610bad576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b610c61610f51565b506000818152600260208181526040928390208351606081018552815460ff16151581526001820154928101839052920154928201929092529015610dba57805115610d3357610cd3816020015160038481548110610cbc57fe5b600091825260209091206002909102015490610e60565b60038381548110610ce057fe5b600091825260209091206002909102015560408101516003805484908110610d0457fe5b90600052602060002090600202016000015410610d2e576000828152600260205260408120600101555b610dba565b610d5f816020015160038481548110610d4857fe5b600091825260209091206002909102015490610eba565b60038381548110610d6c57fe5b600091825260209091206002909102015560408101516003805484908110610d9057fe5b90600052602060002090600202016000015411610dba576000828152600260205260408120600101555b5050565b60008183610e4a5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610e0f578181015183820152602001610df7565b50505050905090810190601f168015610e3c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581610e5657fe5b0495945050505050565b600082820183811015610bad576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000610bad83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060008184841115610f495760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610e0f578181015183820152602001610df7565b505050900390565b60405180606001604052806000151581526020016000815260200160008152509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220f051a0b0ed577543915558bd00f8fdb5f4f407170ff844ac98c77f7b14a0988e64736f6c63430007050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addRecipient(address,uint256)": {
        "params": {
          "_recipient": "address",
          "_rewardRate": "uint"
        }
      },
      "nextRewardAt(uint256)": {
        "params": {
          "_rate": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "nextRewardFor(address)": {
        "params": {
          "_recipient": "address"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "removeRecipient(uint256,address)": {
        "params": {
          "_index": "uint",
          "_recipient": "address"
        }
      },
      "setAdjustment(uint256,bool,uint256,uint256)": {
        "params": {
          "_add": "bool",
          "_index": "uint",
          "_rate": "uint",
          "_target": "uint"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addRecipient(address,uint256)": {
        "notice": "adds recipient for distributions"
      },
      "distribute()": {
        "notice": "send epoch reward to staking contract"
      },
      "nextRewardAt(uint256)": {
        "notice": "view function for next reward at given rate"
      },
      "nextRewardFor(address)": {
        "notice": "view function for next reward for specified address"
      },
      "removeRecipient(uint256,address)": {
        "notice": "removes recipient for distributions"
      },
      "setAdjustment(uint256,bool,uint256,uint256)": {
        "notice": "set adjustment info for a collector's reward rate"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1116,
        "contract": "contracts/StakingDistributor.sol:Distributor",
        "label": "_policy",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1118,
        "contract": "contracts/StakingDistributor.sol:Distributor",
        "label": "_newPolicy",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1256,
        "contract": "contracts/StakingDistributor.sol:Distributor",
        "label": "nextEpochTime",
        "offset": 20,
        "slot": "1",
        "type": "t_uint32"
      },
      {
        "astId": 1260,
        "contract": "contracts/StakingDistributor.sol:Distributor",
        "label": "adjustments",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Adjust)1275_storage)"
      },
      {
        "astId": 1268,
        "contract": "contracts/StakingDistributor.sol:Distributor",
        "label": "info",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(Info)1265_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Info)1265_storage)dyn_storage": {
        "base": "t_struct(Info)1265_storage",
        "encoding": "dynamic_array",
        "label": "struct Distributor.Info[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Adjust)1275_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Distributor.Adjust)",
        "numberOfBytes": "32",
        "value": "t_struct(Adjust)1275_storage"
      },
      "t_struct(Adjust)1275_storage": {
        "encoding": "inplace",
        "label": "struct Distributor.Adjust",
        "members": [
          {
            "astId": 1270,
            "contract": "contracts/StakingDistributor.sol:Distributor",
            "label": "add",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1272,
            "contract": "contracts/StakingDistributor.sol:Distributor",
            "label": "rate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1274,
            "contract": "contracts/StakingDistributor.sol:Distributor",
            "label": "target",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Info)1265_storage": {
        "encoding": "inplace",
        "label": "struct Distributor.Info",
        "members": [
          {
            "astId": 1262,
            "contract": "contracts/StakingDistributor.sol:Distributor",
            "label": "rate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1264,
            "contract": "contracts/StakingDistributor.sol:Distributor",
            "label": "recipient",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}