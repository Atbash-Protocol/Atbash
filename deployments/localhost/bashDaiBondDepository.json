{
  "address": "0x7bc06c482DEAd17c0e297aFbC32f6e63d3846650",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bash",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_DAO",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bondCalculator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "priceInUSD",
          "type": "uint256"
        }
      ],
      "name": "BondCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "priceInUSD",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "internalPrice",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "debtRatio",
          "type": "uint256"
        }
      ],
      "name": "BondPriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        }
      ],
      "name": "BondRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialBCV",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBCV",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "adjustment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "addition",
          "type": "bool"
        }
      ],
      "name": "ControlVariableAdjustment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipPulled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipPushed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "Bash",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adjustment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "add",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "buffer",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "lastTime",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondCalculator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bondInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pricePaid",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "lastTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "vesting",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondPriceInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "decay_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debtRatio_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_controlVariable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPayout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_vestingTerm",
          "type": "uint32"
        }
      ],
      "name": "initializeBondTerms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLiquidityBond",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastDecay",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "payoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "pendingPayoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingPayout_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "percentVestedFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "percentVested_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "principle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pullManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner_",
          "type": "address"
        }
      ],
      "name": "pushManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "recoverLostToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_stake",
          "type": "bool"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_addition",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_increment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_target",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_buffer",
          "type": "uint32"
        }
      ],
      "name": "setAdjustment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum atbashBondDepository.PARAMETER",
          "name": "_parameter",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_input",
          "type": "uint256"
        }
      ],
      "name": "setBondTerms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_helper",
          "type": "bool"
        }
      ],
      "name": "setStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingHelper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "standardizedDebtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "terms",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "controlVariable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPayout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "vestingTerm",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useHelper",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0fdeb28ad582c232af00e01d4467ee2da00a2da695b8ba66919fc866a3bac5d2",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x7bc06c482DEAd17c0e297aFbC32f6e63d3846650",
    "transactionIndex": 0,
    "gasUsed": "2520334",
    "logsBloom": "0x
    "blockHash": "0xdcdbda060c89009df6f6aacb1482f8c62e8fa5ab2a52ad5b016b1ddc3dd608e1",
    "transactionHash": "0x0fdeb28ad582c232af00e01d4467ee2da00a2da695b8ba66919fc866a3bac5d2",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 58,
        "transactionHash": "0x0fdeb28ad582c232af00e01d4467ee2da00a2da695b8ba66919fc866a3bac5d2",
        "address": "0x7bc06c482DEAd17c0e297aFbC32f6e63d3846650",
        "topics": [
          "0xea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xdcdbda060c89009df6f6aacb1482f8c62e8fa5ab2a52ad5b016b1ddc3dd608e1"
      }
    ],
    "blockNumber": 58,
    "cumulativeGasUsed": "2520334",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
    "0x908B40ED87FCA620B101B3Cba2B4C640D11eF016",
    "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0x7969c5eD335650692Bc04293B07F5BF2e7A673C0"
  ],
  "numDeployments": 1,
  "solcInputHash": "c0e32f0ba7baaacdec956e8363efa7fa",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bash\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bondCalculator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"}],\"name\":\"BondCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"internalPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"}],\"name\":\"BondPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"BondRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBCV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBCV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adjustment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"addition\",\"type\":\"bool\"}],\"name\":\"ControlVariableAdjustment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPushed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Bash\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adjustment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"buffer\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondCalculator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bondInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePaid\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"lastTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vesting\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"decay_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtRatio_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_vestingTerm\",\"type\":\"uint32\"}],\"name\":\"initializeBondTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquidityBond\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDecay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"payoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"pendingPayoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingPayout_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"percentVestedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentVested_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"principle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"pushManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverLostToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_addition\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_increment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_buffer\",\"type\":\"uint32\"}],\"name\":\"setAdjustment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum atbashBondDepository.PARAMETER\",\"name\":\"_parameter\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_input\",\"type\":\"uint256\"}],\"name\":\"setBondTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_helper\",\"type\":\"bool\"}],\"name\":\"setStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingHelper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"standardizedDebtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"vestingTerm\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useHelper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bondPrice()\":{\"returns\":{\"price_\":\"uint\"}},\"bondPriceInUSD()\":{\"returns\":{\"price_\":\"uint\"}},\"currentDebt()\":{\"returns\":{\"_0\":\"uint\"}},\"debtDecay()\":{\"returns\":{\"decay_\":\"uint\"}},\"debtRatio()\":{\"returns\":{\"debtRatio_\":\"uint\"}},\"deposit(uint256,uint256,address)\":{\"params\":{\"_amount\":\"uint\",\"_depositor\":\"address\",\"_maxPrice\":\"uint\"},\"returns\":{\"_0\":\"uint\"}},\"initializeBondTerms(uint256,uint256,uint256,uint256,uint256,uint256,uint32)\":{\"params\":{\"_controlVariable\":\"uint\",\"_fee\":\"uint\",\"_initialDebt\":\"uint\",\"_maxDebt\":\"uint\",\"_maxPayout\":\"uint\",\"_minimumPrice\":\"uint\",\"_vestingTerm\":\"uint32\"}},\"maxPayout()\":{\"returns\":{\"_0\":\"uint\"}},\"payoutFor(uint256)\":{\"params\":{\"_value\":\"uint\"},\"returns\":{\"_0\":\"uint\"}},\"pendingPayoutFor(address)\":{\"params\":{\"_depositor\":\"address\"},\"returns\":{\"pendingPayout_\":\"uint\"}},\"percentVestedFor(address)\":{\"params\":{\"_depositor\":\"address\"},\"returns\":{\"percentVested_\":\"uint\"}},\"recoverLostToken(address)\":{\"returns\":{\"_0\":\"bool\"}},\"redeem(address,bool)\":{\"params\":{\"_recipient\":\"address\",\"_stake\":\"bool\"},\"returns\":{\"_0\":\"uint\"}},\"setAdjustment(bool,uint256,uint256,uint32)\":{\"params\":{\"_addition\":\"bool\",\"_buffer\":\"uint\",\"_increment\":\"uint\",\"_target\":\"uint\"}},\"setBondTerms(uint8,uint256)\":{\"params\":{\"_input\":\"uint\",\"_parameter\":\"PARAMETER\"}},\"setStaking(address,bool)\":{\"params\":{\"_helper\":\"bool\",\"_staking\":\"address\"}},\"standardizedDebtRatio()\":{\"returns\":{\"_0\":\"uint\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bondPrice()\":{\"notice\":\"calculate current bond premium\"},\"bondPriceInUSD()\":{\"notice\":\"converts bond price to DAI value\"},\"currentDebt()\":{\"notice\":\"calculate debt factoring in decay\"},\"debtDecay()\":{\"notice\":\"amount to decay total debt by\"},\"debtRatio()\":{\"notice\":\"calculate current ratio of debt to BASH supply\"},\"deposit(uint256,uint256,address)\":{\"notice\":\"deposit bond\"},\"initializeBondTerms(uint256,uint256,uint256,uint256,uint256,uint256,uint32)\":{\"notice\":\"initializes bond parameters\"},\"maxPayout()\":{\"notice\":\"determine maximum bond size\"},\"payoutFor(uint256)\":{\"notice\":\"calculate interest due for new bond\"},\"pendingPayoutFor(address)\":{\"notice\":\"calculate amount of OHM available for claim by depositor\"},\"percentVestedFor(address)\":{\"notice\":\"calculate how far into vesting a depositor is\"},\"recoverLostToken(address)\":{\"notice\":\"allow anyone to send lost tokens (excluding principle or OHM) to the DAO\"},\"redeem(address,bool)\":{\"notice\":\"redeem bond for user\"},\"setAdjustment(bool,uint256,uint256,uint32)\":{\"notice\":\"set control variable adjustment\"},\"setBondTerms(uint8,uint256)\":{\"notice\":\"set parameters for new bonds\"},\"setStaking(address,bool)\":{\"notice\":\"set contract for auto stake\"},\"standardizedDebtRatio()\":{\"notice\":\"debt ratio in same terms for reserve or liquidity bonds\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BondDepository.sol\":\"atbashBondDepository\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity 0.7.5;\\r\\n\\r\\ninterface IOwnable {\\r\\n    function policy() external view returns (address);\\r\\n\\r\\n    function renounceManagement() external;\\r\\n\\r\\n    function pushManagement(address newOwner_) external;\\r\\n\\r\\n    function pullManagement() external;\\r\\n}\\r\\n\\r\\ncontract Ownable is IOwnable {\\r\\n    address internal _owner;\\r\\n    address internal _newOwner;\\r\\n\\r\\n    event OwnershipPushed(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n    event OwnershipPulled(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        _owner = msg.sender;\\r\\n        emit OwnershipPushed(address(0), _owner);\\r\\n    }\\r\\n\\r\\n    function policy() public view override returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyPolicy() {\\r\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceManagement() public virtual override onlyPolicy {\\r\\n        emit OwnershipPushed(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function pushManagement(address newOwner_)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        onlyPolicy\\r\\n    {\\r\\n        require(\\r\\n            newOwner_ != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        emit OwnershipPushed(_owner, newOwner_);\\r\\n        _newOwner = newOwner_;\\r\\n    }\\r\\n\\r\\n    function pullManagement() public virtual override {\\r\\n        require(msg.sender == _newOwner, \\\"Ownable: must be new owner to pull\\\");\\r\\n        emit OwnershipPulled(_owner, _newOwner);\\r\\n        _owner = _newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub32(uint32 a, uint32 b) internal pure returns (uint32) {\\r\\n        return sub32(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub32(\\r\\n        uint32 a,\\r\\n        uint32 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint32) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint32 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    function sqrrt(uint256 a) internal pure returns (uint256 c) {\\r\\n        if (a > 3) {\\r\\n            c = a;\\r\\n            uint256 b = add(div(a, 2), 1);\\r\\n            while (b < c) {\\r\\n                c = b;\\r\\n                b = div(add(div(a, b), b), 2);\\r\\n            }\\r\\n        } else if (a != 0) {\\r\\n            c = 1;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Address {\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function functionCall(address target, bytes memory data)\\r\\n        internal\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 weiValue,\\r\\n        string memory errorMessage\\r\\n    ) private returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\\r\\n            data\\r\\n        );\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function functionStaticCall(address target, bytes memory data)\\r\\n        internal\\r\\n        view\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function functionDelegateCall(address target, bytes memory data)\\r\\n        internal\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) private pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            if (returndata.length > 0) {\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addressToString(address _address)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        bytes32 _bytes = bytes32(uint256(_address));\\r\\n        bytes memory HEX = \\\"0123456789abcdef\\\";\\r\\n        bytes memory _addr = new bytes(42);\\r\\n\\r\\n        _addr[0] = \\\"0\\\";\\r\\n        _addr[1] = \\\"x\\\";\\r\\n\\r\\n        for (uint256 i = 0; i < 20; i++) {\\r\\n            _addr[2 + i * 2] = HEX[uint8(_bytes[i + 12] >> 4)];\\r\\n            _addr[3 + i * 2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\\r\\n        }\\r\\n\\r\\n        return string(_addr);\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\\r\\nabstract contract ERC20 is IERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // TODO comment actual hash value.\\r\\n    bytes32 private constant ERC20TOKEN_ERC1820_INTERFACE_ID =\\r\\n        keccak256(\\\"ERC20Token\\\");\\r\\n\\r\\n    mapping(address => uint256) internal _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\r\\n\\r\\n    uint256 internal _totalSupply;\\r\\n\\r\\n    string internal _name;\\r\\n\\r\\n    string internal _symbol;\\r\\n\\r\\n    uint8 internal _decimals;\\r\\n\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        uint8 decimals_\\r\\n    ) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _decimals = decimals_;\\r\\n    }\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(\\r\\n            sender,\\r\\n            msg.sender,\\r\\n            _allowances[sender][msg.sender].sub(\\r\\n                amount,\\r\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            msg.sender,\\r\\n            spender,\\r\\n            _allowances[msg.sender][spender].add(addedValue)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            msg.sender,\\r\\n            spender,\\r\\n            _allowances[msg.sender][spender].sub(\\r\\n                subtractedValue,\\r\\n                \\\"ERC20: decreased allowance below zero\\\"\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(\\r\\n            amount,\\r\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\r\\n        );\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function _mint(address account_, uint256 ammount_) internal virtual {\\r\\n        require(account_ != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n        _beforeTokenTransfer(address(this), account_, ammount_);\\r\\n        _totalSupply = _totalSupply.add(ammount_);\\r\\n        _balances[account_] = _balances[account_].add(ammount_);\\r\\n        emit Transfer(address(this), account_, ammount_);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        _balances[account] = _balances[account].sub(\\r\\n            amount,\\r\\n            \\\"ERC20: burn amount exceeds balance\\\"\\r\\n        );\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 amount_\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\\r\\ninterface IERC2612Permit {\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n}\\r\\n\\r\\nlibrary Counters {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct Counter {\\r\\n        uint256 _value; // default: 0\\r\\n    }\\r\\n\\r\\n    function current(Counter storage counter) internal view returns (uint256) {\\r\\n        return counter._value;\\r\\n    }\\r\\n\\r\\n    function increment(Counter storage counter) internal {\\r\\n        counter._value += 1;\\r\\n    }\\r\\n\\r\\n    function decrement(Counter storage counter) internal {\\r\\n        counter._value = counter._value.sub(1);\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract ERC20Permit is ERC20, IERC2612Permit {\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    mapping(address => Counters.Counter) private _nonces;\\r\\n\\r\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\r\\n    bytes32 public constant PERMIT_TYPEHASH =\\r\\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\r\\n\\r\\n    bytes32 public DOMAIN_SEPARATOR;\\r\\n\\r\\n    constructor() {\\r\\n        uint256 chainID;\\r\\n        assembly {\\r\\n            chainID := chainid()\\r\\n        }\\r\\n\\r\\n        DOMAIN_SEPARATOR = keccak256(\\r\\n            abi.encode(\\r\\n                keccak256(\\r\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\r\\n                ),\\r\\n                keccak256(bytes(name())),\\r\\n                keccak256(bytes(\\\"1\\\")), // Version\\r\\n                chainID,\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) public virtual override {\\r\\n        require(block.timestamp <= deadline, \\\"Permit: expired deadline\\\");\\r\\n\\r\\n        bytes32 hashStruct = keccak256(\\r\\n            abi.encode(\\r\\n                PERMIT_TYPEHASH,\\r\\n                owner,\\r\\n                spender,\\r\\n                amount,\\r\\n                _nonces[owner].current(),\\r\\n                deadline\\r\\n            )\\r\\n        );\\r\\n\\r\\n        bytes32 _hash = keccak256(\\r\\n            abi.encodePacked(uint16(0x1901), DOMAIN_SEPARATOR, hashStruct)\\r\\n        );\\r\\n\\r\\n        address signer = ecrecover(_hash, v, r, s);\\r\\n        require(\\r\\n            signer != address(0) && signer == owner,\\r\\n            \\\"ZeroSwapPermit: Invalid signature\\\"\\r\\n        );\\r\\n\\r\\n        _nonces[owner].increment();\\r\\n        _approve(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function nonces(address owner) public view override returns (uint256) {\\r\\n        return _nonces[owner].current();\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(\\r\\n            value\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\r\\n            value,\\r\\n            \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary FullMath {\\r\\n    function fullMul(uint256 x, uint256 y)\\r\\n        private\\r\\n        pure\\r\\n        returns (uint256 l, uint256 h)\\r\\n    {\\r\\n        uint256 mm = mulmod(x, y, uint256(-1));\\r\\n        l = x * y;\\r\\n        h = mm - l;\\r\\n        if (mm < l) h -= 1;\\r\\n    }\\r\\n\\r\\n    function fullDiv(\\r\\n        uint256 l,\\r\\n        uint256 h,\\r\\n        uint256 d\\r\\n    ) private pure returns (uint256) {\\r\\n        uint256 pow2 = d & -d;\\r\\n        d /= pow2;\\r\\n        l /= pow2;\\r\\n        l += h * ((-pow2) / pow2 + 1);\\r\\n        uint256 r = 1;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        return l * r;\\r\\n    }\\r\\n\\r\\n    function mulDiv(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 d\\r\\n    ) internal pure returns (uint256) {\\r\\n        (uint256 l, uint256 h) = fullMul(x, y);\\r\\n        uint256 mm = mulmod(x, y, d);\\r\\n        if (mm > l) h -= 1;\\r\\n        l -= mm;\\r\\n        require(h < d, \\\"FullMath::mulDiv: overflow\\\");\\r\\n        return fullDiv(l, h, d);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary FixedPoint {\\r\\n    struct uq112x112 {\\r\\n        uint224 _x;\\r\\n    }\\r\\n\\r\\n    struct uq144x112 {\\r\\n        uint256 _x;\\r\\n    }\\r\\n\\r\\n    uint8 private constant RESOLUTION = 112;\\r\\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\\r\\n    uint256 private constant Q224 =\\r\\n        0x100000000000000000000000000000000000000000000000000000000;\\r\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\r\\n\\r\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\r\\n        return uint112(self._x >> RESOLUTION);\\r\\n    }\\r\\n\\r\\n    function decode112with18(uq112x112 memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return uint256(self._x) / 5192296858534827;\\r\\n    }\\r\\n\\r\\n    function fraction(uint256 numerator, uint256 denominator)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uq112x112 memory)\\r\\n    {\\r\\n        require(denominator > 0, \\\"FixedPoint::fraction: division by zero\\\");\\r\\n        if (numerator == 0) return FixedPoint.uq112x112(0);\\r\\n\\r\\n        if (numerator <= uint144(-1)) {\\r\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\r\\n            require(result <= uint224(-1), \\\"FixedPoint::fraction: overflow\\\");\\r\\n            return uq112x112(uint224(result));\\r\\n        } else {\\r\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\r\\n            require(result <= uint224(-1), \\\"FixedPoint::fraction: overflow\\\");\\r\\n            return uq112x112(uint224(result));\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface ITreasury {\\r\\n    function deposit(\\r\\n        uint256 _amount,\\r\\n        address _token,\\r\\n        uint256 _profit\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function valueOf(address _token, uint256 _amount)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 value_);\\r\\n}\\r\\n\\r\\ninterface IBondCalculator {\\r\\n    function valuation(address _LP, uint256 _amount)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function markdown(address _LP) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IStaking {\\r\\n    function stake(uint256 _amount, address _recipient) external returns (bool);\\r\\n}\\r\\n\\r\\ninterface IStakingHelper {\\r\\n    function stake(uint256 _amount, address _recipient) external;\\r\\n}\\r\\n\\r\\ncontract atbashBondDepository is Ownable {\\r\\n    using FixedPoint for *;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n    using SafeMath for uint32;\\r\\n\\r\\n    /* ======== EVENTS ======== */\\r\\n\\r\\n    event BondCreated(\\r\\n        uint256 deposit,\\r\\n        uint256 indexed payout,\\r\\n        uint256 indexed expires,\\r\\n        uint256 indexed priceInUSD\\r\\n    );\\r\\n    event BondRedeemed(\\r\\n        address indexed recipient,\\r\\n        uint256 payout,\\r\\n        uint256 remaining\\r\\n    );\\r\\n    event BondPriceChanged(\\r\\n        uint256 indexed priceInUSD,\\r\\n        uint256 indexed internalPrice,\\r\\n        uint256 indexed debtRatio\\r\\n    );\\r\\n    event ControlVariableAdjustment(\\r\\n        uint256 initialBCV,\\r\\n        uint256 newBCV,\\r\\n        uint256 adjustment,\\r\\n        bool addition\\r\\n    );\\r\\n\\r\\n    /* ======== STATE VARIABLES ======== */\\r\\n\\r\\n    address public immutable Bash; // token given as payment for bond\\r\\n    address public immutable principle; // token used to create bond\\r\\n    address public immutable treasury; // mints OHM when receives principle\\r\\n    address public immutable DAO; // receives profit share from bond\\r\\n\\r\\n    bool public immutable isLiquidityBond; // LP and Reserve bonds are treated slightly different\\r\\n    address public immutable bondCalculator; // calculates value of LP tokens\\r\\n\\r\\n    address public staking; // to auto-stake payout\\r\\n    address public stakingHelper; // to stake and claim if no staking warmup\\r\\n    bool public useHelper;\\r\\n\\r\\n    Terms public terms; // stores terms for new bonds\\r\\n    Adjust public adjustment; // stores adjustment to BCV data\\r\\n\\r\\n    mapping(address => Bond) public bondInfo; // stores bond information for depositors\\r\\n\\r\\n    uint256 public totalDebt; // total value of outstanding bonds; used for pricing\\r\\n    uint32 public lastDecay; // reference time for debt decay\\r\\n\\r\\n    /* ======== STRUCTS ======== */\\r\\n\\r\\n    // Info for creating new bonds\\r\\n    struct Terms {\\r\\n        uint256 controlVariable; // scaling variable for price\\r\\n        uint256 minimumPrice; // vs principle value\\r\\n        uint256 maxPayout; // in thousandths of a %. i.e. 500 = 0.5%\\r\\n        uint256 fee; // as % of bond payout, in hundreths. ( 500 = 5% = 0.05 for every 1 paid)\\r\\n        uint256 maxDebt; // 9 decimal debt ratio, max % total supply created as debt\\r\\n        uint32 vestingTerm; // in seconds\\r\\n    }\\r\\n\\r\\n    // Info for bond holder\\r\\n    struct Bond {\\r\\n        uint256 payout; // OHM remaining to be paid\\r\\n        uint256 pricePaid; // In DAI, for front end viewing\\r\\n        uint32 lastTime; // Last interaction\\r\\n        uint32 vesting; // Seconds left to vest\\r\\n    }\\r\\n\\r\\n    // Info for incremental adjustments to control variable\\r\\n    struct Adjust {\\r\\n        bool add; // addition or subtraction\\r\\n        uint256 rate; // increment\\r\\n        uint256 target; // BCV when adjustment finished\\r\\n        uint32 buffer; // minimum length (in seconds) between adjustments\\r\\n        uint32 lastTime; // time when last adjustment made\\r\\n    }\\r\\n\\r\\n    /* ======== INITIALIZATION ======== */\\r\\n\\r\\n    constructor(\\r\\n        address _bash,\\r\\n        address _principle, // dai, bashdai\\r\\n        address _treasury,\\r\\n        address _DAO,\\r\\n        address _bondCalculator\\r\\n    ) {\\r\\n        require(_bash != address(0));\\r\\n        Bash = _bash;\\r\\n        require(_principle != address(0));\\r\\n        principle = _principle;\\r\\n        require(_treasury != address(0));\\r\\n        treasury = _treasury;\\r\\n        require(_DAO != address(0));\\r\\n        DAO = _DAO;\\r\\n        // bondCalculator should be address(0) if not LP bond\\r\\n        bondCalculator = _bondCalculator;\\r\\n        isLiquidityBond = (_bondCalculator != address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice initializes bond parameters\\r\\n     *  @param _controlVariable uint\\r\\n     *  @param _vestingTerm uint32\\r\\n     *  @param _minimumPrice uint\\r\\n     *  @param _maxPayout uint\\r\\n     *  @param _fee uint\\r\\n     *  @param _maxDebt uint\\r\\n     *  @param _initialDebt uint\\r\\n     */\\r\\n    function initializeBondTerms(\\r\\n        uint256 _controlVariable,\\r\\n        uint256 _minimumPrice,\\r\\n        uint256 _maxPayout,\\r\\n        uint256 _fee,\\r\\n        uint256 _maxDebt,\\r\\n        uint256 _initialDebt,\\r\\n        uint32 _vestingTerm\\r\\n    ) external onlyPolicy {\\r\\n        require(terms.controlVariable == 0, \\\"Bonds must be initialized from 0\\\");\\r\\n        terms = Terms({\\r\\n            controlVariable: _controlVariable,\\r\\n            minimumPrice: _minimumPrice,\\r\\n            maxPayout: _maxPayout,\\r\\n            fee: _fee,\\r\\n            maxDebt: _maxDebt,\\r\\n            vestingTerm: _vestingTerm\\r\\n        });\\r\\n        totalDebt = _initialDebt;\\r\\n        lastDecay = uint32(block.timestamp);\\r\\n    }\\r\\n\\r\\n    /* ======== POLICY FUNCTIONS ======== */\\r\\n\\r\\n    enum PARAMETER {\\r\\n        VESTING,\\r\\n        PAYOUT,\\r\\n        FEE,\\r\\n        DEBT,\\r\\n        MINPRICE\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice set parameters for new bonds\\r\\n     *  @param _parameter PARAMETER\\r\\n     *  @param _input uint\\r\\n     */\\r\\n    function setBondTerms(PARAMETER _parameter, uint256 _input)\\r\\n        external\\r\\n        onlyPolicy\\r\\n    {\\r\\n        if (_parameter == PARAMETER.VESTING) {\\r\\n            // 0\\r\\n            require(_input >= 129600, \\\"Vesting must be longer than 36 hours\\\");\\r\\n            terms.vestingTerm = uint32(_input);\\r\\n        } else if (_parameter == PARAMETER.PAYOUT) {\\r\\n            // 1\\r\\n            require(_input <= 1000, \\\"Payout cannot be above 1 percent\\\");\\r\\n            terms.maxPayout = _input;\\r\\n        } else if (_parameter == PARAMETER.FEE) {\\r\\n            // 2\\r\\n            require(_input <= 10000, \\\"DAO fee cannot exceed payout\\\");\\r\\n            terms.fee = _input;\\r\\n        } else if (_parameter == PARAMETER.DEBT) {\\r\\n            // 3\\r\\n            terms.maxDebt = _input;\\r\\n        } else if (_parameter == PARAMETER.MINPRICE) {\\r\\n            // 4\\r\\n            terms.minimumPrice = _input;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice set control variable adjustment\\r\\n     *  @param _addition bool\\r\\n     *  @param _increment uint\\r\\n     *  @param _target uint\\r\\n     *  @param _buffer uint\\r\\n     */\\r\\n    function setAdjustment(\\r\\n        bool _addition,\\r\\n        uint256 _increment,\\r\\n        uint256 _target,\\r\\n        uint32 _buffer\\r\\n    ) external onlyPolicy {\\r\\n        adjustment = Adjust({\\r\\n            add: _addition,\\r\\n            rate: _increment,\\r\\n            target: _target,\\r\\n            buffer: _buffer,\\r\\n            lastTime: uint32(block.timestamp)\\r\\n        });\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice set contract for auto stake\\r\\n     *  @param _staking address\\r\\n     *  @param _helper bool\\r\\n     */\\r\\n    function setStaking(address _staking, bool _helper) external onlyPolicy {\\r\\n        require(_staking != address(0));\\r\\n        if (_helper) {\\r\\n            useHelper = true;\\r\\n            stakingHelper = _staking;\\r\\n        } else {\\r\\n            useHelper = false;\\r\\n            staking = _staking;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* ======== USER FUNCTIONS ======== */\\r\\n\\r\\n    /**\\r\\n     *  @notice deposit bond\\r\\n     *  @param _amount uint\\r\\n     *  @param _maxPrice uint\\r\\n     *  @param _depositor address\\r\\n     *  @return uint\\r\\n     */\\r\\n    function deposit(\\r\\n        uint256 _amount,\\r\\n        uint256 _maxPrice,\\r\\n        address _depositor\\r\\n    ) external returns (uint256) {\\r\\n        require(_depositor != address(0), \\\"Invalid address\\\");\\r\\n\\r\\n        decayDebt();\\r\\n        require(totalDebt <= terms.maxDebt, \\\"Max capacity reached\\\");\\r\\n\\r\\n        uint256 priceInUSD = bondPriceInUSD(); // Stored in bond info\\r\\n        uint256 nativePrice = _bondPrice();\\r\\n\\r\\n        require(\\r\\n            _maxPrice >= nativePrice,\\r\\n            \\\"Slippage limit: more than max price\\\"\\r\\n        ); // slippage protection\\r\\n\\r\\n        uint256 value = ITreasury(treasury).valueOf(principle, _amount); // valuation of asset in BASH\\r\\n        uint256 payout = payoutFor(value); // payout to bonder is computed\\r\\n\\r\\n        require(payout >= 10000000, \\\"Bond too small\\\"); // must be > 0.01 BASH ( underflow protection )\\r\\n        require(payout <= maxPayout(), \\\"Bond too large\\\"); // size protection because there is no slippage\\r\\n\\r\\n        // profits are calculated\\r\\n        uint256 fee = payout.mul(terms.fee).div(10000);\\r\\n        uint256 profit = value.sub(payout).sub(fee);\\r\\n\\r\\n        /**\\r\\n            principle is transferred in\\r\\n            approved and\\r\\n            deposited into the treasury, returning (_amount - profit) BASH\\r\\n         */\\r\\n        IERC20(principle).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        IERC20(principle).approve(address(treasury), _amount);\\r\\n        ITreasury(treasury).deposit(_amount, principle, profit);\\r\\n\\r\\n        if (fee != 0) {\\r\\n            // fee is transferred to dao\\r\\n            IERC20(Bash).safeTransfer(DAO, fee);\\r\\n        }\\r\\n\\r\\n        // total debt is increased\\r\\n        totalDebt = totalDebt.add(value); // debt in BASH owed to bonders not yet vested (vested bash is no longer debt)\\r\\n\\r\\n        // depositor info is stored\\r\\n        bondInfo[_depositor] = Bond({\\r\\n            payout: bondInfo[_depositor].payout.add(payout),\\r\\n            vesting: terms.vestingTerm,\\r\\n            lastTime: uint32(block.timestamp),\\r\\n            pricePaid: priceInUSD\\r\\n        });\\r\\n\\r\\n        // indexed events are emitted\\r\\n        emit BondCreated(\\r\\n            _amount,\\r\\n            payout,\\r\\n            block.timestamp.add(terms.vestingTerm),\\r\\n            priceInUSD\\r\\n        );\\r\\n        emit BondPriceChanged(bondPriceInUSD(), _bondPrice(), debtRatio());\\r\\n\\r\\n        adjust(); // control variable is adjusted\\r\\n        return payout;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice redeem bond for user\\r\\n     *  @param _recipient address\\r\\n     *  @param _stake bool\\r\\n     *  @return uint\\r\\n     */\\r\\n    function redeem(address _recipient, bool _stake)\\r\\n        external\\r\\n        returns (uint256)\\r\\n    {\\r\\n        Bond memory info = bondInfo[_recipient];\\r\\n        // (seconds since last interaction / vesting term remaining)\\r\\n        uint256 percentVested = percentVestedFor(_recipient);\\r\\n\\r\\n        if (percentVested >= 10000) {\\r\\n            // if fully vested\\r\\n            delete bondInfo[_recipient]; // delete user info\\r\\n            emit BondRedeemed(_recipient, info.payout, 0); // emit bond data\\r\\n            return stakeOrSend(_recipient, _stake, info.payout); // pay user everything due\\r\\n        } else {\\r\\n            // if unfinished\\r\\n            // calculate payout vested\\r\\n            uint256 payout = info.payout.mul(percentVested).div(10000);\\r\\n            // store updated deposit info\\r\\n            bondInfo[_recipient] = Bond({\\r\\n                payout: info.payout.sub(payout),\\r\\n                vesting: info.vesting.sub32(\\r\\n                    uint32(block.timestamp).sub32(info.lastTime)\\r\\n                ),\\r\\n                lastTime: uint32(block.timestamp),\\r\\n                pricePaid: info.pricePaid\\r\\n            });\\r\\n\\r\\n            emit BondRedeemed(_recipient, payout, bondInfo[_recipient].payout);\\r\\n            return stakeOrSend(_recipient, _stake, payout);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* ======== INTERNAL HELPER FUNCTIONS ======== */\\r\\n\\r\\n    /**\\r\\n     *  @notice allow user to stake payout automatically\\r\\n     *  @param _stake bool\\r\\n     *  @param _amount uint\\r\\n     *  @return uint\\r\\n     */\\r\\n    function stakeOrSend(\\r\\n        address _recipient,\\r\\n        bool _stake,\\r\\n        uint256 _amount\\r\\n    ) internal returns (uint256) {\\r\\n        if (!_stake) {\\r\\n            // if user does not want to stake\\r\\n            IERC20(Bash).transfer(_recipient, _amount); // send payout\\r\\n        } else {\\r\\n            // if user wants to stake\\r\\n            if (useHelper) {\\r\\n                // use if staking warmup is 0\\r\\n                IERC20(Bash).approve(stakingHelper, _amount);\\r\\n                IStakingHelper(stakingHelper).stake(_amount, _recipient);\\r\\n            } else {\\r\\n                IERC20(Bash).approve(staking, _amount);\\r\\n                IStaking(staking).stake(_amount, _recipient);\\r\\n            }\\r\\n        }\\r\\n        return _amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice makes incremental adjustment to control variable\\r\\n     */\\r\\n    function adjust() internal {\\r\\n        uint256 timeCanAdjust = adjustment.lastTime.add(adjustment.buffer);\\r\\n        if (adjustment.rate != 0 && block.timestamp >= timeCanAdjust) {\\r\\n            uint256 initial = terms.controlVariable;\\r\\n            if (adjustment.add) {\\r\\n                terms.controlVariable = terms.controlVariable.add(\\r\\n                    adjustment.rate\\r\\n                );\\r\\n                if (terms.controlVariable >= adjustment.target) {\\r\\n                    adjustment.rate = 0;\\r\\n                }\\r\\n            } else {\\r\\n                terms.controlVariable = terms.controlVariable.sub(\\r\\n                    adjustment.rate\\r\\n                );\\r\\n                if (terms.controlVariable <= adjustment.target) {\\r\\n                    adjustment.rate = 0;\\r\\n                }\\r\\n            }\\r\\n            adjustment.lastTime = uint32(block.timestamp);\\r\\n            emit ControlVariableAdjustment(\\r\\n                initial,\\r\\n                terms.controlVariable,\\r\\n                adjustment.rate,\\r\\n                adjustment.add\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice reduce total debt\\r\\n     */\\r\\n    function decayDebt() internal {\\r\\n        totalDebt = totalDebt.sub(debtDecay());\\r\\n        lastDecay = uint32(block.timestamp);\\r\\n    }\\r\\n\\r\\n    /* ======== VIEW FUNCTIONS ======== */\\r\\n\\r\\n    /**\\r\\n     *  @notice determine maximum bond size\\r\\n     *  @return uint\\r\\n     */\\r\\n    function maxPayout() public view returns (uint256) {\\r\\n        return IERC20(Bash).totalSupply().mul(terms.maxPayout).div(100000);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice calculate interest due for new bond\\r\\n     *  @param _value uint\\r\\n     *  @return uint\\r\\n     */\\r\\n    function payoutFor(uint256 _value) public view returns (uint256) {\\r\\n        // The payout amount in BASH is the deposited asset\\u2019s BASH value divided by the bond price\\r\\n        return\\r\\n            FixedPoint.fraction(_value, bondPrice()).decode112with18().div(\\r\\n                1e16\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice calculate current bond premium\\r\\n     *  @return price_ uint\\r\\n     */\\r\\n    function bondPrice() public view returns (uint256 price_) {\\r\\n        price_ = terms.controlVariable.mul(debtRatio()).add(1000000000).div(\\r\\n            1e7\\r\\n        );\\r\\n        if (price_ < terms.minimumPrice) {\\r\\n            price_ = terms.minimumPrice;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice calculate current bond price and remove floor if above\\r\\n     *  @return price_ uint\\r\\n     */\\r\\n    function _bondPrice() internal returns (uint256 price_) {\\r\\n        price_ = terms.controlVariable.mul(debtRatio()).add(1000000000).div(\\r\\n            1e7\\r\\n        );\\r\\n        if (price_ < terms.minimumPrice) {\\r\\n            price_ = terms.minimumPrice;\\r\\n        } else if (terms.minimumPrice != 0) {\\r\\n            terms.minimumPrice = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice converts bond price to DAI value\\r\\n     *  @return price_ uint\\r\\n     */\\r\\n    function bondPriceInUSD() public view returns (uint256 price_) {\\r\\n        if (isLiquidityBond) {\\r\\n            price_ = bondPrice()\\r\\n                .mul(IBondCalculator(bondCalculator).markdown(principle))\\r\\n                .div(100);\\r\\n        } else {\\r\\n            price_ = bondPrice().mul(10**IERC20(principle).decimals()).div(100);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice calculate current ratio of debt to BASH supply\\r\\n     *  @return debtRatio_ uint\\r\\n     */\\r\\n    function debtRatio() public view returns (uint256 debtRatio_) {\\r\\n        uint256 supply = IERC20(Bash).totalSupply();\\r\\n        debtRatio_ = FixedPoint\\r\\n            .fraction(currentDebt().mul(1e9), supply)\\r\\n            .decode112with18()\\r\\n            .div(1e18);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice debt ratio in same terms for reserve or liquidity bonds\\r\\n     *  @return uint\\r\\n     */\\r\\n    function standardizedDebtRatio() external view returns (uint256) {\\r\\n        if (isLiquidityBond) {\\r\\n            return\\r\\n                debtRatio()\\r\\n                    .mul(IBondCalculator(bondCalculator).markdown(principle))\\r\\n                    .div(1e9);\\r\\n        } else {\\r\\n            return debtRatio();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice calculate debt factoring in decay\\r\\n     *  @return uint\\r\\n     */\\r\\n    function currentDebt() public view returns (uint256) {\\r\\n        return totalDebt.sub(debtDecay());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice amount to decay total debt by\\r\\n     *  @return decay_ uint\\r\\n     */\\r\\n    function debtDecay() public view returns (uint256 decay_) {\\r\\n        uint32 timeSinceLast = uint32(block.timestamp).sub32(lastDecay);\\r\\n        decay_ = totalDebt.mul(timeSinceLast).div(terms.vestingTerm);\\r\\n        if (decay_ > totalDebt) {\\r\\n            decay_ = totalDebt;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice calculate how far into vesting a depositor is\\r\\n     *  @param _depositor address\\r\\n     *  @return percentVested_ uint\\r\\n     */\\r\\n    function percentVestedFor(address _depositor)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 percentVested_)\\r\\n    {\\r\\n        Bond memory bond = bondInfo[_depositor];\\r\\n        uint256 secondsSinceLast = uint32(block.timestamp).sub(bond.lastTime);\\r\\n        uint256 vesting = bond.vesting;\\r\\n\\r\\n        if (vesting > 0) {\\r\\n            percentVested_ = secondsSinceLast.mul(10000).div(vesting);\\r\\n        } else {\\r\\n            percentVested_ = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice calculate amount of OHM available for claim by depositor\\r\\n     *  @param _depositor address\\r\\n     *  @return pendingPayout_ uint\\r\\n     */\\r\\n    function pendingPayoutFor(address _depositor)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 pendingPayout_)\\r\\n    {\\r\\n        uint256 percentVested = percentVestedFor(_depositor);\\r\\n        uint256 payout = bondInfo[_depositor].payout;\\r\\n\\r\\n        if (percentVested >= 10000) {\\r\\n            pendingPayout_ = payout;\\r\\n        } else {\\r\\n            pendingPayout_ = payout.mul(percentVested).div(10000);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* ======= AUXILLIARY ======= */\\r\\n\\r\\n    /**\\r\\n     *  @notice allow anyone to send lost tokens (excluding principle or OHM) to the DAO\\r\\n     *  @return bool\\r\\n     */\\r\\n    function recoverLostToken(address _token) external returns (bool) {\\r\\n        require(_token != Bash);\\r\\n        require(_token != principle);\\r\\n        IERC20(_token).safeTransfer(\\r\\n            DAO,\\r\\n            IERC20(_token).balanceOf(address(this))\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x98c24d72cea5347b55e8109260afeb08ab946f115795c16ce5a26ee57defaca3\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b5060405162002e6238038062002e62833981810160405260a08110156200003857600080fd5b50805160208201516040808401516060850151608090950151600080546001600160a01b031916331780825593519596949592949391926001600160a01b0392909216917fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba908290a36001600160a01b038516620000b557600080fd5b6001600160601b0319606086901b166080526001600160a01b038416620000db57600080fd5b6001600160601b0319606085901b1660a0526001600160a01b0383166200010157600080fd5b6001600160601b0319606084901b1660c0526001600160a01b0382166200012757600080fd5b6001600160601b0319606092831b811660e0529181901b909116610120526001600160a01b0316151560f81b6101005250505060805160601c60a05160601c60c05160601c60e05160601c6101005160f81c6101205160601c612c346200022e60003980610e785280611633528061191a525080610e4a52806116025280611c2052508061147352806116fc5280611867525080610dd452806110e152806112e552806113c75250806105d55280610ea75280610f4e5280611110528061128c52806112b6528061139652806116625280611825525080610b3c528061145152806117e652806119735280611c955280611e345280611f19528061202e5250612c346000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c8063844b5c7c11610125578063cf37a891116100ad578063d7ccfb0b1161007c578063d7ccfb0b14610592578063e0176de81461059a578063e392a262146105a2578063f5c2ab5b146105aa578063fc7b9c18146105cb57610211565b8063cf37a891146104d4578063d4d863ce1461051b578063d502562514610549578063d79690601461058a57610211565b8063ae9832cf116100f4578063ae9832cf14610415578063b4abccba1461044c578063c5332b7c14610472578063cd1234b31461047a578063cea55f57146104cc57610211565b8063844b5c7c146103cb5780638dbdbe6d146103d3578063904b3ece1461040557806398fabd3a1461040d57610211565b8063451ee4a1116101a85780635a96ac0a116101775780635a96ac0a1461038e57806361d027b314610396578063759076e51461039e57806377b81895146103a65780637927ebf8146103ae57610211565b8063451ee4a1146102fc57806346f68ee91461033a5780634cf088d914610360578063507930ec1461036857610211565b80631e321a0f116101e45780631e321a0f146102845780631feed31f146102aa5780632f3f470a146102d85780633c4e6da7146102f457610211565b8063016a42841461021657806301b88ee81461023a5780630505c8c914610272578063089208d81461027a575b600080fd5b61021e6105d3565b604080516001600160a01b039092168252519081900360200190f35b6102606004803603602081101561025057600080fd5b50356001600160a01b03166105f7565b60408051918252519081900360200190f35b61021e610650565b610282610660565b005b6102826004803603604081101561029a57600080fd5b5060ff81351690602001356106f7565b610260600480360360408110156102c057600080fd5b506001600160a01b03813516906020013515156108da565b6102e0610b2a565b604080519115158252519081900360200190f35b61021e610b3a565b610304610b5e565b60408051951515865260208601949094528484019290925263ffffffff9081166060850152166080830152519081900360a00190f35b6102826004803603602081101561035057600080fd5b50356001600160a01b0316610b84565b61021e610c71565b6102606004803603602081101561037e57600080fd5b50356001600160a01b0316610c80565b610282610d28565b61021e610dd2565b610260610df6565b61021e610e11565b610260600480360360208110156103c457600080fd5b5035610e20565b610260610e46565b610260600480360360608110156103e957600080fd5b50803590602081013590604001356001600160a01b0316610fdf565b6102606115fe565b61021e6116fa565b6102826004803603608081101561042b57600080fd5b5080351515906020810135906040810135906060013563ffffffff1661171e565b6102e06004803603602081101561046257600080fd5b50356001600160a01b03166117e2565b61021e611918565b6104a06004803603602081101561049057600080fd5b50356001600160a01b031661193c565b60408051948552602085019390935263ffffffff91821684840152166060830152519081900360800190f35b61026061196e565b610282600480360360e08110156104ea57600080fd5b5080359060208101359060408101359060608101359060808101359060a08101359060c0013563ffffffff16611a26565b6102826004803603604081101561053157600080fd5b506001600160a01b0381351690602001351515611b40565b610551611c03565b604080519687526020870195909552858501939093526060850191909152608084015263ffffffff1660a0830152519081900360c00190f35b6102e0611c1e565b610260611c42565b610260611c81565b610260611d1e565b6105b2611d77565b6040805163ffffffff9092168252519081900360200190f35b610260611d83565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061060383610c80565b6001600160a01b0384166000908152600e6020526040902054909150612710821061063057809250610649565b6106466127106106408385611d89565b90611de9565b92505b5050919050565b6000546001600160a01b03165b90565b6000546001600160a01b031633146106ad576040805162461bcd60e51b81526020600482018190526024820152600080516020612b6e833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba908390a3600080546001600160a01b0319169055565b6000546001600160a01b03163314610744576040805162461bcd60e51b81526020600482018190526024820152600080516020612b6e833981519152604482015290519081900360640190fd5b600082600481111561075257fe5b14156107b4576201fa4081101561079a5760405162461bcd60e51b8152600401808060200182810382526024815260200180612bb16024913960400191505060405180910390fd5b6009805463ffffffff191663ffffffff83161790556108d6565b60018260048111156107c257fe5b1415610829576103e881111561081f576040805162461bcd60e51b815260206004820181905260248201527f5061796f75742063616e6e6f742062652061626f766520312070657263656e74604482015290519081900360640190fd5b60068190556108d6565b600282600481111561083757fe5b141561089e57612710811115610894576040805162461bcd60e51b815260206004820152601c60248201527f44414f206665652063616e6e6f7420657863656564207061796f757400000000604482015290519081900360640190fd5b60078190556108d6565b60038260048111156108ac57fe5b14156108bc5760088190556108d6565b60048260048111156108ca57fe5b14156108d65760058190555b5050565b60006108e4612a98565b506001600160a01b0383166000908152600e602090815260408083208151608081018352815481526001820154938101939093526002015463ffffffff80821692840192909252600160201b90041660608201529061094285610c80565b905061271081106109d7576001600160a01b0385166000818152600e6020908152604080832083815560018101849055600201805467ffffffffffffffff19169055855181519081529182019290925281517f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b1929181900390910190a26109ce85858460000151611e2b565b92505050610b24565b81516000906109ee90612710906106409085611d89565b90506040518060800160405280610a1283866000015161212f90919063ffffffff16565b8152602001846020015181526020014263ffffffff168152602001610a66610a4d86604001514263ffffffff1661217190919063ffffffff16565b866060015163ffffffff1661217190919063ffffffff16565b63ffffffff9081169091526001600160a01b0388166000818152600e6020908152604091829020855180825586830151600183015586840151600290920180546060909801518716600160201b0267ffffffff00000000199390971663ffffffff19909816979097179190911694909417909455805185815293840192909252815190927f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b192908290030190a2610b1e868683611e2b565b93505050505b92915050565b600354600160a01b900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600a54600b54600c54600d5460ff9093169263ffffffff80821691600160201b90041685565b6000546001600160a01b03163314610bd1576040805162461bcd60e51b81526020600482018190526024820152600080516020612b6e833981519152604482015290519081900360640190fd5b6001600160a01b038116610c165760405162461bcd60e51b8152600401808060200182810382526026815260200180612adf6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba91a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031681565b6000610c8a612a98565b506001600160a01b0382166000908152600e602090815260408083208151608081018352815481526001820154938101939093526002015463ffffffff808216928401839052600160201b90910481166060840152919291610cf0914282169161212f16565b606083015190915063ffffffff168015610d1b57610d148161064084612710611d89565b9350610d20565b600093505b505050919050565b6001546001600160a01b03163314610d715760405162461bcd60e51b8152600401808060200182810382526022815260200180612b056022913960400191505060405180910390fd5b600154600080546040516001600160a01b0393841693909116917faa151555690c956fc3ea32f106bb9f119b5237a061eaa8557cff3e51e3792c8d91a3600154600080546001600160a01b0319166001600160a01b03909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610e0c610e03611d1e565b600f549061212f565b905090565b6003546001600160a01b031681565b6000610b24662386f26fc10000610640610e4185610e3c611c42565b6121b3565b61232a565b60007f000000000000000000000000000000000000000000000000000000000000000015610f4457610f3d60646106407f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166332da80a37f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610f0357600080fd5b505afa158015610f17573d6000803e3d6000fd5b505050506040513d6020811015610f2d57600080fd5b5051610f37611c42565b90611d89565b905061065d565b610e0c60646106407f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610fa557600080fd5b505afa158015610fb9573d6000803e3d6000fd5b505050506040513d6020811015610fcf57600080fd5b505160ff16600a0a610f37611c42565b60006001600160a01b03821661102e576040805162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015290519081900360640190fd5b611036612342565b600854600f541115611086576040805162461bcd60e51b815260206004820152601460248201527313585e0818d85c1858da5d1e481c995858da195960621b604482015290519081900360640190fd5b6000611090610e46565b9050600061109c612367565b9050808510156110dd5760405162461bcd60e51b8152600401808060200182810382526023815260200180612b8e6023913960400191505060405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631eec5a9a7f0000000000000000000000000000000000000000000000000000000000000000896040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b15801561117457600080fd5b505afa158015611188573d6000803e3d6000fd5b505050506040513d602081101561119e57600080fd5b5051905060006111ad82610e20565b9050629896808110156111f8576040805162461bcd60e51b815260206004820152600e60248201526d109bdb99081d1bdbc81cdb585b1b60921b604482015290519081900360640190fd5b611200611c81565b811115611245576040805162461bcd60e51b815260206004820152600e60248201526d426f6e6420746f6f206c6172676560901b604482015290519081900360640190fd5b600061126561271061064060046003015485611d8990919063ffffffff16565b9050600061127d82611277868661212f565b9061212f565b90506112b46001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308d6123a9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000008c6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561134b57600080fd5b505af115801561135f573d6000803e3d6000fd5b505050506040513d602081101561137557600080fd5b50506040805163bc157ac160e01b8152600481018c90526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301526044820184905291517f00000000000000000000000000000000000000000000000000000000000000009092169163bc157ac1916064808201926020929091908290030181600087803b15801561141257600080fd5b505af1158015611426573d6000803e3d6000fd5b505050506040513d602081101561143c57600080fd5b50508115611498576114986001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084612409565b600f546114a59085612460565b600f55604080516080810182526001600160a01b038a166000908152600e602052919091205481906114d79086612460565b8152602080820189905263ffffffff428181166040808601919091526009805484166060968701526001600160a01b038f166000908152600e865282902087518155948701516001860155908601516002909401805496909501518316600160201b0267ffffffff000000001994841663ffffffff1990971696909617939093169490941790925554889261157192909181169061246016565b604080518d8152905186917f1fec6dc81f140574bf43f6b1e420ae1dd47928b9d57db8cbd7b8611063b85ae5919081900360200190a46115af61196e565b6115b7612367565b6115bf610e46565b6040517f375b221f40939bfd8f49723a17cf7bc6d576ebf72efe2cc3e991826f5b3f390a90600090a46115f06124ba565b509098975050505050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000156116f257610f3d633b9aca006106407f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166332da80a37f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156116be57600080fd5b505afa1580156116d2573d6000803e3d6000fd5b505050506040513d60208110156116e857600080fd5b5051610f3761196e565b610f3d61196e565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b0316331461176b576040805162461bcd60e51b81526020600482018190526024820152600080516020612b6e833981519152604482015290519081900360640190fd5b6040805160a0810182529415158086526020860185905290850183905263ffffffff91821660608601819052429092166080909501859052600a805460ff19169091179055600b92909255600c55600d805463ffffffff191690911767ffffffff000000001916600160201b909202919091179055565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561182357600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561186257600080fd5b6119107f0000000000000000000000000000000000000000000000000000000000000000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156118d357600080fd5b505afa1580156118e7573d6000803e3d6000fd5b505050506040513d60208110156118fd57600080fd5b50516001600160a01b0385169190612409565b506001919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600e6020526000908152604090208054600182015460029092015490919063ffffffff80821691600160201b90041684565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119ca57600080fd5b505afa1580156119de573d6000803e3d6000fd5b505050506040513d60208110156119f457600080fd5b50519050611a20670de0b6b3a7640000610640610e41611a1a633b9aca00610f37610df6565b856121b3565b91505090565b6000546001600160a01b03163314611a73576040805162461bcd60e51b81526020600482018190526024820152600080516020612b6e833981519152604482015290519081900360640190fd5b60045415611ac8576040805162461bcd60e51b815260206004820181905260248201527f426f6e6473206d75737420626520696e697469616c697a65642066726f6d2030604482015290519081900360640190fd5b6040805160c08101825288815260208101889052908101869052606081018590526080810184905263ffffffff91821660a09091018190526004979097556005959095556006939093556007919091556008556009805463ffffffff199081169094179055600f556010805490921642909116179055565b6000546001600160a01b03163314611b8d576040805162461bcd60e51b81526020600482018190526024820152600080516020612b6e833981519152604482015290519081900360640190fd5b6001600160a01b038216611ba057600080fd5b8015611bd55760038054600160a01b60ff60a01b19909116176001600160a01b0319166001600160a01b0384161790556108d6565b6003805460ff60a01b19169055600280546001600160a01b0384166001600160a01b03199091161790555050565b60045460055460065460075460085460095463ffffffff1686565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000611c6d62989680610640633b9aca00611c67611c5e61196e565b60045490611d89565b90612460565b60055490915081101561065d575060055490565b6000610e0c620186a06106406004600201547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cec57600080fd5b505afa158015611d00573d6000803e3d6000fd5b505050506040513d6020811015611d1657600080fd5b505190611d89565b6010546000908190611d3c9063ffffffff4281169181169061217116565b600954600f54919250611d619163ffffffff91821691610640919080861690611d8916565b9150600f54821115611d7357600f5491505b5090565b60105463ffffffff1681565b600f5481565b600082611d9857506000610b24565b82820282848281611da557fe5b0414611de25760405162461bcd60e51b8152600401808060200182810382526021815260200180612b4d6021913960400191505060405180910390fd5b9392505050565b6000611de283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506125c5565b600082611edb577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb85846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015611ea957600080fd5b505af1158015611ebd573d6000803e3d6000fd5b505050506040513d6020811015611ed357600080fd5b506121289050565b600354600160a01b900460ff1615612002576003546040805163095ea7b360e01b81526001600160a01b0392831660048201526024810185905290517f00000000000000000000000000000000000000000000000000000000000000009092169163095ea7b3916044808201926020929091908290030181600087803b158015611f6457600080fd5b505af1158015611f78573d6000803e3d6000fd5b505050506040513d6020811015611f8e57600080fd5b505060035460408051637acb775760e01b8152600481018590526001600160a01b03878116602483015291519190921691637acb775791604480830192600092919082900301818387803b158015611fe557600080fd5b505af1158015611ff9573d6000803e3d6000fd5b50505050612128565b6002546040805163095ea7b360e01b81526001600160a01b0392831660048201526024810185905290517f00000000000000000000000000000000000000000000000000000000000000009092169163095ea7b3916044808201926020929091908290030181600087803b15801561207957600080fd5b505af115801561208d573d6000803e3d6000fd5b505050506040513d60208110156120a357600080fd5b505060025460408051637acb775760e01b8152600481018590526001600160a01b03878116602483015291519190921691637acb77579160448083019260209291908290030181600087803b1580156120fb57600080fd5b505af115801561210f573d6000803e3d6000fd5b505050506040513d602081101561212557600080fd5b50505b5092915050565b6000611de283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612667565b6000611de283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506126c1565b6121bb612acc565b600082116121fa5760405162461bcd60e51b8152600401808060200182810382526026815260200180612b276026913960400191505060405180910390fd5b826122145750604080516020810190915260008152610b24565b71ffffffffffffffffffffffffffffffffffff83116122bb57600082607085901b8161223c57fe5b0490506001600160e01b0381111561229b576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b6040518060200160405280826001600160e01b0316815250915050610b24565b60006122cc84600160701b85612720565b90506001600160e01b0381111561229b576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b516612725dd1d243ab6001600160e01b039091160490565b61234d610e03611d1e565b600f556010805463ffffffff19164263ffffffff16179055565b600061238362989680610640633b9aca00611c67611c5e61196e565b600554909150811015612399575060055461065d565b6005541561065d57600060055590565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526124039085906127c0565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261245b9084906127c0565b505050565b600082820183811015611de2576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600d546000906124dc9063ffffffff600160201b820481169181169061246016565b600b54909150158015906124f05750804210155b156125c257600454600a5460ff161561252a57600b5460045461251291612460565b6004819055600c5411612525576000600b555b61254c565b600b546004546125399161212f565b6004819055600c541061254c576000600b555b600d805467ffffffff000000001916600160201b4263ffffffff1602179055600454600b54600a546040805185815260208101949094528381019290925260ff1615156060830152517fb923e581a0f83128e9e1d8297aa52b18d6744310476e0b54509c054cd7a93b2a916080908290030190a1505b50565b600081836126515760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156126165781810151838201526020016125fe565b50505050905090810190601f1680156126435780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161265d57fe5b0495945050505050565b600081848411156126b95760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156126165781810151838201526020016125fe565b505050900390565b60008363ffffffff168363ffffffff16111582906126b95760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156126165781810151838201526020016125fe565b600080600061272f8686612871565b915091506000848061273d57fe5b868809905082811115612751576001820391505b80830392508482106127aa576040805162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a3a6d756c4469763a206f766572666c6f77000000000000604482015290519081900360640190fd5b6127b583838761289e565b979650505050505050565b6060612815826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661290e9092919063ffffffff16565b80519091501561245b5780806020019051602081101561283457600080fd5b505161245b5760405162461bcd60e51b815260040180806020018281038252602a815260200180612bd5602a913960400191505060405180910390fd5b6000808060001984860990508385029250828103915082811015612896576001820391505b509250929050565b600081810382168083816128ae57fe5b0492508085816128ba57fe5b0494508081600003816128c957fe5b60028581038087028203028087028203028087028203028087028203028087028203028087028203029586029003909402930460010193909302939093010292915050565b606061291d8484600085612925565b949350505050565b606061293085612a92565b612981576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106129c05780518252601f1990920191602091820191016129a1565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612a22576040519150601f19603f3d011682016040523d82523d6000602084013e612a27565b606091505b50915091508115612a3b57915061291d9050565b805115612a4b5780518082602001fd5b60405162461bcd60e51b81526020600482018181528651602484015286518793919283926044019190850190808383600083156126165781810151838201526020016125fe565b3b151590565b60405180608001604052806000815260200160008152602001600063ffffffff168152602001600063ffffffff1681525090565b6040805160208101909152600081529056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a206d757374206265206e6577206f776e657220746f2070756c6c4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206279207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572536c697070616765206c696d69743a206d6f7265207468616e206d617820707269636556657374696e67206d757374206265206c6f6e676572207468616e20333620686f7572735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220bb1276dda272e452840c76a04a48333b81d35561a4010c5b0be25be20ca13a4c64736f6c63430007050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102115760003560e01c8063844b5c7c11610125578063cf37a891116100ad578063d7ccfb0b1161007c578063d7ccfb0b14610592578063e0176de81461059a578063e392a262146105a2578063f5c2ab5b146105aa578063fc7b9c18146105cb57610211565b8063cf37a891146104d4578063d4d863ce1461051b578063d502562514610549578063d79690601461058a57610211565b8063ae9832cf116100f4578063ae9832cf14610415578063b4abccba1461044c578063c5332b7c14610472578063cd1234b31461047a578063cea55f57146104cc57610211565b8063844b5c7c146103cb5780638dbdbe6d146103d3578063904b3ece1461040557806398fabd3a1461040d57610211565b8063451ee4a1116101a85780635a96ac0a116101775780635a96ac0a1461038e57806361d027b314610396578063759076e51461039e57806377b81895146103a65780637927ebf8146103ae57610211565b8063451ee4a1146102fc57806346f68ee91461033a5780634cf088d914610360578063507930ec1461036857610211565b80631e321a0f116101e45780631e321a0f146102845780631feed31f146102aa5780632f3f470a146102d85780633c4e6da7146102f457610211565b8063016a42841461021657806301b88ee81461023a5780630505c8c914610272578063089208d81461027a575b600080fd5b61021e6105d3565b604080516001600160a01b039092168252519081900360200190f35b6102606004803603602081101561025057600080fd5b50356001600160a01b03166105f7565b60408051918252519081900360200190f35b61021e610650565b610282610660565b005b6102826004803603604081101561029a57600080fd5b5060ff81351690602001356106f7565b610260600480360360408110156102c057600080fd5b506001600160a01b03813516906020013515156108da565b6102e0610b2a565b604080519115158252519081900360200190f35b61021e610b3a565b610304610b5e565b60408051951515865260208601949094528484019290925263ffffffff9081166060850152166080830152519081900360a00190f35b6102826004803603602081101561035057600080fd5b50356001600160a01b0316610b84565b61021e610c71565b6102606004803603602081101561037e57600080fd5b50356001600160a01b0316610c80565b610282610d28565b61021e610dd2565b610260610df6565b61021e610e11565b610260600480360360208110156103c457600080fd5b5035610e20565b610260610e46565b610260600480360360608110156103e957600080fd5b50803590602081013590604001356001600160a01b0316610fdf565b6102606115fe565b61021e6116fa565b6102826004803603608081101561042b57600080fd5b5080351515906020810135906040810135906060013563ffffffff1661171e565b6102e06004803603602081101561046257600080fd5b50356001600160a01b03166117e2565b61021e611918565b6104a06004803603602081101561049057600080fd5b50356001600160a01b031661193c565b60408051948552602085019390935263ffffffff91821684840152166060830152519081900360800190f35b61026061196e565b610282600480360360e08110156104ea57600080fd5b5080359060208101359060408101359060608101359060808101359060a08101359060c0013563ffffffff16611a26565b6102826004803603604081101561053157600080fd5b506001600160a01b0381351690602001351515611b40565b610551611c03565b604080519687526020870195909552858501939093526060850191909152608084015263ffffffff1660a0830152519081900360c00190f35b6102e0611c1e565b610260611c42565b610260611c81565b610260611d1e565b6105b2611d77565b6040805163ffffffff9092168252519081900360200190f35b610260611d83565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061060383610c80565b6001600160a01b0384166000908152600e6020526040902054909150612710821061063057809250610649565b6106466127106106408385611d89565b90611de9565b92505b5050919050565b6000546001600160a01b03165b90565b6000546001600160a01b031633146106ad576040805162461bcd60e51b81526020600482018190526024820152600080516020612b6e833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba908390a3600080546001600160a01b0319169055565b6000546001600160a01b03163314610744576040805162461bcd60e51b81526020600482018190526024820152600080516020612b6e833981519152604482015290519081900360640190fd5b600082600481111561075257fe5b14156107b4576201fa4081101561079a5760405162461bcd60e51b8152600401808060200182810382526024815260200180612bb16024913960400191505060405180910390fd5b6009805463ffffffff191663ffffffff83161790556108d6565b60018260048111156107c257fe5b1415610829576103e881111561081f576040805162461bcd60e51b815260206004820181905260248201527f5061796f75742063616e6e6f742062652061626f766520312070657263656e74604482015290519081900360640190fd5b60068190556108d6565b600282600481111561083757fe5b141561089e57612710811115610894576040805162461bcd60e51b815260206004820152601c60248201527f44414f206665652063616e6e6f7420657863656564207061796f757400000000604482015290519081900360640190fd5b60078190556108d6565b60038260048111156108ac57fe5b14156108bc5760088190556108d6565b60048260048111156108ca57fe5b14156108d65760058190555b5050565b60006108e4612a98565b506001600160a01b0383166000908152600e602090815260408083208151608081018352815481526001820154938101939093526002015463ffffffff80821692840192909252600160201b90041660608201529061094285610c80565b905061271081106109d7576001600160a01b0385166000818152600e6020908152604080832083815560018101849055600201805467ffffffffffffffff19169055855181519081529182019290925281517f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b1929181900390910190a26109ce85858460000151611e2b565b92505050610b24565b81516000906109ee90612710906106409085611d89565b90506040518060800160405280610a1283866000015161212f90919063ffffffff16565b8152602001846020015181526020014263ffffffff168152602001610a66610a4d86604001514263ffffffff1661217190919063ffffffff16565b866060015163ffffffff1661217190919063ffffffff16565b63ffffffff9081169091526001600160a01b0388166000818152600e6020908152604091829020855180825586830151600183015586840151600290920180546060909801518716600160201b0267ffffffff00000000199390971663ffffffff19909816979097179190911694909417909455805185815293840192909252815190927f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b192908290030190a2610b1e868683611e2b565b93505050505b92915050565b600354600160a01b900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600a54600b54600c54600d5460ff9093169263ffffffff80821691600160201b90041685565b6000546001600160a01b03163314610bd1576040805162461bcd60e51b81526020600482018190526024820152600080516020612b6e833981519152604482015290519081900360640190fd5b6001600160a01b038116610c165760405162461bcd60e51b8152600401808060200182810382526026815260200180612adf6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba91a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031681565b6000610c8a612a98565b506001600160a01b0382166000908152600e602090815260408083208151608081018352815481526001820154938101939093526002015463ffffffff808216928401839052600160201b90910481166060840152919291610cf0914282169161212f16565b606083015190915063ffffffff168015610d1b57610d148161064084612710611d89565b9350610d20565b600093505b505050919050565b6001546001600160a01b03163314610d715760405162461bcd60e51b8152600401808060200182810382526022815260200180612b056022913960400191505060405180910390fd5b600154600080546040516001600160a01b0393841693909116917faa151555690c956fc3ea32f106bb9f119b5237a061eaa8557cff3e51e3792c8d91a3600154600080546001600160a01b0319166001600160a01b03909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610e0c610e03611d1e565b600f549061212f565b905090565b6003546001600160a01b031681565b6000610b24662386f26fc10000610640610e4185610e3c611c42565b6121b3565b61232a565b60007f000000000000000000000000000000000000000000000000000000000000000015610f4457610f3d60646106407f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166332da80a37f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610f0357600080fd5b505afa158015610f17573d6000803e3d6000fd5b505050506040513d6020811015610f2d57600080fd5b5051610f37611c42565b90611d89565b905061065d565b610e0c60646106407f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610fa557600080fd5b505afa158015610fb9573d6000803e3d6000fd5b505050506040513d6020811015610fcf57600080fd5b505160ff16600a0a610f37611c42565b60006001600160a01b03821661102e576040805162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015290519081900360640190fd5b611036612342565b600854600f541115611086576040805162461bcd60e51b815260206004820152601460248201527313585e0818d85c1858da5d1e481c995858da195960621b604482015290519081900360640190fd5b6000611090610e46565b9050600061109c612367565b9050808510156110dd5760405162461bcd60e51b8152600401808060200182810382526023815260200180612b8e6023913960400191505060405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631eec5a9a7f0000000000000000000000000000000000000000000000000000000000000000896040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b15801561117457600080fd5b505afa158015611188573d6000803e3d6000fd5b505050506040513d602081101561119e57600080fd5b5051905060006111ad82610e20565b9050629896808110156111f8576040805162461bcd60e51b815260206004820152600e60248201526d109bdb99081d1bdbc81cdb585b1b60921b604482015290519081900360640190fd5b611200611c81565b811115611245576040805162461bcd60e51b815260206004820152600e60248201526d426f6e6420746f6f206c6172676560901b604482015290519081900360640190fd5b600061126561271061064060046003015485611d8990919063ffffffff16565b9050600061127d82611277868661212f565b9061212f565b90506112b46001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308d6123a9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000008c6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561134b57600080fd5b505af115801561135f573d6000803e3d6000fd5b505050506040513d602081101561137557600080fd5b50506040805163bc157ac160e01b8152600481018c90526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301526044820184905291517f00000000000000000000000000000000000000000000000000000000000000009092169163bc157ac1916064808201926020929091908290030181600087803b15801561141257600080fd5b505af1158015611426573d6000803e3d6000fd5b505050506040513d602081101561143c57600080fd5b50508115611498576114986001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084612409565b600f546114a59085612460565b600f55604080516080810182526001600160a01b038a166000908152600e602052919091205481906114d79086612460565b8152602080820189905263ffffffff428181166040808601919091526009805484166060968701526001600160a01b038f166000908152600e865282902087518155948701516001860155908601516002909401805496909501518316600160201b0267ffffffff000000001994841663ffffffff1990971696909617939093169490941790925554889261157192909181169061246016565b604080518d8152905186917f1fec6dc81f140574bf43f6b1e420ae1dd47928b9d57db8cbd7b8611063b85ae5919081900360200190a46115af61196e565b6115b7612367565b6115bf610e46565b6040517f375b221f40939bfd8f49723a17cf7bc6d576ebf72efe2cc3e991826f5b3f390a90600090a46115f06124ba565b509098975050505050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000156116f257610f3d633b9aca006106407f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166332da80a37f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156116be57600080fd5b505afa1580156116d2573d6000803e3d6000fd5b505050506040513d60208110156116e857600080fd5b5051610f3761196e565b610f3d61196e565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b0316331461176b576040805162461bcd60e51b81526020600482018190526024820152600080516020612b6e833981519152604482015290519081900360640190fd5b6040805160a0810182529415158086526020860185905290850183905263ffffffff91821660608601819052429092166080909501859052600a805460ff19169091179055600b92909255600c55600d805463ffffffff191690911767ffffffff000000001916600160201b909202919091179055565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561182357600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561186257600080fd5b6119107f0000000000000000000000000000000000000000000000000000000000000000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156118d357600080fd5b505afa1580156118e7573d6000803e3d6000fd5b505050506040513d60208110156118fd57600080fd5b50516001600160a01b0385169190612409565b506001919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600e6020526000908152604090208054600182015460029092015490919063ffffffff80821691600160201b90041684565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119ca57600080fd5b505afa1580156119de573d6000803e3d6000fd5b505050506040513d60208110156119f457600080fd5b50519050611a20670de0b6b3a7640000610640610e41611a1a633b9aca00610f37610df6565b856121b3565b91505090565b6000546001600160a01b03163314611a73576040805162461bcd60e51b81526020600482018190526024820152600080516020612b6e833981519152604482015290519081900360640190fd5b60045415611ac8576040805162461bcd60e51b815260206004820181905260248201527f426f6e6473206d75737420626520696e697469616c697a65642066726f6d2030604482015290519081900360640190fd5b6040805160c08101825288815260208101889052908101869052606081018590526080810184905263ffffffff91821660a09091018190526004979097556005959095556006939093556007919091556008556009805463ffffffff199081169094179055600f556010805490921642909116179055565b6000546001600160a01b03163314611b8d576040805162461bcd60e51b81526020600482018190526024820152600080516020612b6e833981519152604482015290519081900360640190fd5b6001600160a01b038216611ba057600080fd5b8015611bd55760038054600160a01b60ff60a01b19909116176001600160a01b0319166001600160a01b0384161790556108d6565b6003805460ff60a01b19169055600280546001600160a01b0384166001600160a01b03199091161790555050565b60045460055460065460075460085460095463ffffffff1686565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000611c6d62989680610640633b9aca00611c67611c5e61196e565b60045490611d89565b90612460565b60055490915081101561065d575060055490565b6000610e0c620186a06106406004600201547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cec57600080fd5b505afa158015611d00573d6000803e3d6000fd5b505050506040513d6020811015611d1657600080fd5b505190611d89565b6010546000908190611d3c9063ffffffff4281169181169061217116565b600954600f54919250611d619163ffffffff91821691610640919080861690611d8916565b9150600f54821115611d7357600f5491505b5090565b60105463ffffffff1681565b600f5481565b600082611d9857506000610b24565b82820282848281611da557fe5b0414611de25760405162461bcd60e51b8152600401808060200182810382526021815260200180612b4d6021913960400191505060405180910390fd5b9392505050565b6000611de283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506125c5565b600082611edb577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb85846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015611ea957600080fd5b505af1158015611ebd573d6000803e3d6000fd5b505050506040513d6020811015611ed357600080fd5b506121289050565b600354600160a01b900460ff1615612002576003546040805163095ea7b360e01b81526001600160a01b0392831660048201526024810185905290517f00000000000000000000000000000000000000000000000000000000000000009092169163095ea7b3916044808201926020929091908290030181600087803b158015611f6457600080fd5b505af1158015611f78573d6000803e3d6000fd5b505050506040513d6020811015611f8e57600080fd5b505060035460408051637acb775760e01b8152600481018590526001600160a01b03878116602483015291519190921691637acb775791604480830192600092919082900301818387803b158015611fe557600080fd5b505af1158015611ff9573d6000803e3d6000fd5b50505050612128565b6002546040805163095ea7b360e01b81526001600160a01b0392831660048201526024810185905290517f00000000000000000000000000000000000000000000000000000000000000009092169163095ea7b3916044808201926020929091908290030181600087803b15801561207957600080fd5b505af115801561208d573d6000803e3d6000fd5b505050506040513d60208110156120a357600080fd5b505060025460408051637acb775760e01b8152600481018590526001600160a01b03878116602483015291519190921691637acb77579160448083019260209291908290030181600087803b1580156120fb57600080fd5b505af115801561210f573d6000803e3d6000fd5b505050506040513d602081101561212557600080fd5b50505b5092915050565b6000611de283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612667565b6000611de283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506126c1565b6121bb612acc565b600082116121fa5760405162461bcd60e51b8152600401808060200182810382526026815260200180612b276026913960400191505060405180910390fd5b826122145750604080516020810190915260008152610b24565b71ffffffffffffffffffffffffffffffffffff83116122bb57600082607085901b8161223c57fe5b0490506001600160e01b0381111561229b576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b6040518060200160405280826001600160e01b0316815250915050610b24565b60006122cc84600160701b85612720565b90506001600160e01b0381111561229b576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b516612725dd1d243ab6001600160e01b039091160490565b61234d610e03611d1e565b600f556010805463ffffffff19164263ffffffff16179055565b600061238362989680610640633b9aca00611c67611c5e61196e565b600554909150811015612399575060055461065d565b6005541561065d57600060055590565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526124039085906127c0565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261245b9084906127c0565b505050565b600082820183811015611de2576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600d546000906124dc9063ffffffff600160201b820481169181169061246016565b600b54909150158015906124f05750804210155b156125c257600454600a5460ff161561252a57600b5460045461251291612460565b6004819055600c5411612525576000600b555b61254c565b600b546004546125399161212f565b6004819055600c541061254c576000600b555b600d805467ffffffff000000001916600160201b4263ffffffff1602179055600454600b54600a546040805185815260208101949094528381019290925260ff1615156060830152517fb923e581a0f83128e9e1d8297aa52b18d6744310476e0b54509c054cd7a93b2a916080908290030190a1505b50565b600081836126515760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156126165781810151838201526020016125fe565b50505050905090810190601f1680156126435780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161265d57fe5b0495945050505050565b600081848411156126b95760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156126165781810151838201526020016125fe565b505050900390565b60008363ffffffff168363ffffffff16111582906126b95760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156126165781810151838201526020016125fe565b600080600061272f8686612871565b915091506000848061273d57fe5b868809905082811115612751576001820391505b80830392508482106127aa576040805162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a3a6d756c4469763a206f766572666c6f77000000000000604482015290519081900360640190fd5b6127b583838761289e565b979650505050505050565b6060612815826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661290e9092919063ffffffff16565b80519091501561245b5780806020019051602081101561283457600080fd5b505161245b5760405162461bcd60e51b815260040180806020018281038252602a815260200180612bd5602a913960400191505060405180910390fd5b6000808060001984860990508385029250828103915082811015612896576001820391505b509250929050565b600081810382168083816128ae57fe5b0492508085816128ba57fe5b0494508081600003816128c957fe5b60028581038087028203028087028203028087028203028087028203028087028203028087028203029586029003909402930460010193909302939093010292915050565b606061291d8484600085612925565b949350505050565b606061293085612a92565b612981576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106129c05780518252601f1990920191602091820191016129a1565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612a22576040519150601f19603f3d011682016040523d82523d6000602084013e612a27565b606091505b50915091508115612a3b57915061291d9050565b805115612a4b5780518082602001fd5b60405162461bcd60e51b81526020600482018181528651602484015286518793919283926044019190850190808383600083156126165781810151838201526020016125fe565b3b151590565b60405180608001604052806000815260200160008152602001600063ffffffff168152602001600063ffffffff1681525090565b6040805160208101909152600081529056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a206d757374206265206e6577206f776e657220746f2070756c6c4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206279207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572536c697070616765206c696d69743a206d6f7265207468616e206d617820707269636556657374696e67206d757374206265206c6f6e676572207468616e20333620686f7572735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220bb1276dda272e452840c76a04a48333b81d35561a4010c5b0be25be20ca13a4c64736f6c63430007050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bondPrice()": {
        "returns": {
          "price_": "uint"
        }
      },
      "bondPriceInUSD()": {
        "returns": {
          "price_": "uint"
        }
      },
      "currentDebt()": {
        "returns": {
          "_0": "uint"
        }
      },
      "debtDecay()": {
        "returns": {
          "decay_": "uint"
        }
      },
      "debtRatio()": {
        "returns": {
          "debtRatio_": "uint"
        }
      },
      "deposit(uint256,uint256,address)": {
        "params": {
          "_amount": "uint",
          "_depositor": "address",
          "_maxPrice": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "initializeBondTerms(uint256,uint256,uint256,uint256,uint256,uint256,uint32)": {
        "params": {
          "_controlVariable": "uint",
          "_fee": "uint",
          "_initialDebt": "uint",
          "_maxDebt": "uint",
          "_maxPayout": "uint",
          "_minimumPrice": "uint",
          "_vestingTerm": "uint32"
        }
      },
      "maxPayout()": {
        "returns": {
          "_0": "uint"
        }
      },
      "payoutFor(uint256)": {
        "params": {
          "_value": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "pendingPayoutFor(address)": {
        "params": {
          "_depositor": "address"
        },
        "returns": {
          "pendingPayout_": "uint"
        }
      },
      "percentVestedFor(address)": {
        "params": {
          "_depositor": "address"
        },
        "returns": {
          "percentVested_": "uint"
        }
      },
      "recoverLostToken(address)": {
        "returns": {
          "_0": "bool"
        }
      },
      "redeem(address,bool)": {
        "params": {
          "_recipient": "address",
          "_stake": "bool"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "setAdjustment(bool,uint256,uint256,uint32)": {
        "params": {
          "_addition": "bool",
          "_buffer": "uint",
          "_increment": "uint",
          "_target": "uint"
        }
      },
      "setBondTerms(uint8,uint256)": {
        "params": {
          "_input": "uint",
          "_parameter": "PARAMETER"
        }
      },
      "setStaking(address,bool)": {
        "params": {
          "_helper": "bool",
          "_staking": "address"
        }
      },
      "standardizedDebtRatio()": {
        "returns": {
          "_0": "uint"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bondPrice()": {
        "notice": "calculate current bond premium"
      },
      "bondPriceInUSD()": {
        "notice": "converts bond price to DAI value"
      },
      "currentDebt()": {
        "notice": "calculate debt factoring in decay"
      },
      "debtDecay()": {
        "notice": "amount to decay total debt by"
      },
      "debtRatio()": {
        "notice": "calculate current ratio of debt to BASH supply"
      },
      "deposit(uint256,uint256,address)": {
        "notice": "deposit bond"
      },
      "initializeBondTerms(uint256,uint256,uint256,uint256,uint256,uint256,uint32)": {
        "notice": "initializes bond parameters"
      },
      "maxPayout()": {
        "notice": "determine maximum bond size"
      },
      "payoutFor(uint256)": {
        "notice": "calculate interest due for new bond"
      },
      "pendingPayoutFor(address)": {
        "notice": "calculate amount of OHM available for claim by depositor"
      },
      "percentVestedFor(address)": {
        "notice": "calculate how far into vesting a depositor is"
      },
      "recoverLostToken(address)": {
        "notice": "allow anyone to send lost tokens (excluding principle or OHM) to the DAO"
      },
      "redeem(address,bool)": {
        "notice": "redeem bond for user"
      },
      "setAdjustment(bool,uint256,uint256,uint32)": {
        "notice": "set control variable adjustment"
      },
      "setBondTerms(uint8,uint256)": {
        "notice": "set parameters for new bonds"
      },
      "setStaking(address,bool)": {
        "notice": "set contract for auto stake"
      },
      "standardizedDebtRatio()": {
        "notice": "debt ratio in same terms for reserve or liquidity bonds"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22,
        "contract": "contracts/BondDepository.sol:atbashBondDepository",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 24,
        "contract": "contracts/BondDepository.sol:atbashBondDepository",
        "label": "_newOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2323,
        "contract": "contracts/BondDepository.sol:atbashBondDepository",
        "label": "staking",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2325,
        "contract": "contracts/BondDepository.sol:atbashBondDepository",
        "label": "stakingHelper",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2327,
        "contract": "contracts/BondDepository.sol:atbashBondDepository",
        "label": "useHelper",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 2329,
        "contract": "contracts/BondDepository.sol:atbashBondDepository",
        "label": "terms",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Terms)2352_storage"
      },
      {
        "astId": 2331,
        "contract": "contracts/BondDepository.sol:atbashBondDepository",
        "label": "adjustment",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Adjust)2372_storage"
      },
      {
        "astId": 2335,
        "contract": "contracts/BondDepository.sol:atbashBondDepository",
        "label": "bondInfo",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_struct(Bond)2361_storage)"
      },
      {
        "astId": 2337,
        "contract": "contracts/BondDepository.sol:atbashBondDepository",
        "label": "totalDebt",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2339,
        "contract": "contracts/BondDepository.sol:atbashBondDepository",
        "label": "lastDecay",
        "offset": 0,
        "slot": "16",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Bond)2361_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct atbashBondDepository.Bond)",
        "numberOfBytes": "32",
        "value": "t_struct(Bond)2361_storage"
      },
      "t_struct(Adjust)2372_storage": {
        "encoding": "inplace",
        "label": "struct atbashBondDepository.Adjust",
        "members": [
          {
            "astId": 2363,
            "contract": "contracts/BondDepository.sol:atbashBondDepository",
            "label": "add",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2365,
            "contract": "contracts/BondDepository.sol:atbashBondDepository",
            "label": "rate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2367,
            "contract": "contracts/BondDepository.sol:atbashBondDepository",
            "label": "target",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2369,
            "contract": "contracts/BondDepository.sol:atbashBondDepository",
            "label": "buffer",
            "offset": 0,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 2371,
            "contract": "contracts/BondDepository.sol:atbashBondDepository",
            "label": "lastTime",
            "offset": 4,
            "slot": "3",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Bond)2361_storage": {
        "encoding": "inplace",
        "label": "struct atbashBondDepository.Bond",
        "members": [
          {
            "astId": 2354,
            "contract": "contracts/BondDepository.sol:atbashBondDepository",
            "label": "payout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2356,
            "contract": "contracts/BondDepository.sol:atbashBondDepository",
            "label": "pricePaid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2358,
            "contract": "contracts/BondDepository.sol:atbashBondDepository",
            "label": "lastTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 2360,
            "contract": "contracts/BondDepository.sol:atbashBondDepository",
            "label": "vesting",
            "offset": 4,
            "slot": "2",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Terms)2352_storage": {
        "encoding": "inplace",
        "label": "struct atbashBondDepository.Terms",
        "members": [
          {
            "astId": 2341,
            "contract": "contracts/BondDepository.sol:atbashBondDepository",
            "label": "controlVariable",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2343,
            "contract": "contracts/BondDepository.sol:atbashBondDepository",
            "label": "minimumPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2345,
            "contract": "contracts/BondDepository.sol:atbashBondDepository",
            "label": "maxPayout",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2347,
            "contract": "contracts/BondDepository.sol:atbashBondDepository",
            "label": "fee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2349,
            "contract": "contracts/BondDepository.sol:atbashBondDepository",
            "label": "maxDebt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2351,
            "contract": "contracts/BondDepository.sol:atbashBondDepository",
            "label": "vestingTerm",
            "offset": 0,
            "slot": "5",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}